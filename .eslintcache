[{"/home/user/Desktop/wavelix/Code/wavelix_admin/src/App.js":"1","/home/user/Desktop/wavelix/Code/wavelix_admin/src/reportWebVitals.js":"2","/home/user/Desktop/wavelix/Code/wavelix_admin/src/components/Login.js":"3","/home/user/Desktop/wavelix/Code/wavelix_admin/src/Routes.js":"4","/home/user/Desktop/wavelix/Code/wavelix_admin/src/reducers/index.js":"5","/home/user/Desktop/wavelix/Code/wavelix_admin/src/index.js":"6","/home/user/Desktop/wavelix/Code/wavelix_admin/src/reducers/LoginReducer.js":"7","/home/user/Desktop/wavelix/Code/wavelix_admin/src/actions/types.js":"8","/home/user/Desktop/wavelix/Code/wavelix_admin/src/helpers/index.js":"9","/home/user/Desktop/wavelix/Code/wavelix_admin/src/actions/index.js":"10","/home/user/Desktop/wavelix/Code/wavelix_admin/src/helpers/actionsHelper.js":"11","/home/user/Desktop/wavelix/Code/wavelix_admin/src/actions/LoginActions.js":"12","/home/user/Desktop/wavelix/Code/wavelix_admin/src/components/Home.js":"13","/home/user/Desktop/wavelix/Code/wavelix_admin/src/components/TopHeader.js":"14","/home/user/Desktop/wavelix/Code/wavelix_admin/src/components/Wrapper.js":"15","/home/user/Desktop/wavelix/Code/wavelix_admin/src/actions/WrapperActions.js":"16","/home/user/Desktop/wavelix/Code/wavelix_admin/src/reducers/HomeReducer.js":"17","/home/user/Desktop/wavelix/Code/wavelix_admin/src/actions/HomeActions.js":"18","/home/user/Desktop/wavelix/Code/wavelix_admin/src/components/AdminAccounts.js":"19","/home/user/Desktop/wavelix/Code/wavelix_admin/src/actions/AdminAccountsActions.js":"20","/home/user/Desktop/wavelix/Code/wavelix_admin/src/reducers/AdminAccountsReducer.js":"21","/home/user/Desktop/wavelix/Code/wavelix_admin/src/helpers/adminProfileHelper.js":"22","/home/user/Desktop/wavelix/Code/wavelix_admin/src/reducers/ViewAdminAccountReducer.js":"23","/home/user/Desktop/wavelix/Code/wavelix_admin/src/actions/ViewAdminAccountActions.js":"24","/home/user/Desktop/wavelix/Code/wavelix_admin/src/components/ViewAdminAccount.js":"25","/home/user/Desktop/wavelix/Code/wavelix_admin/src/components/CreateAdminAccount.js":"26","/home/user/Desktop/wavelix/Code/wavelix_admin/src/actions/CreateAdminAccountActions.js":"27","/home/user/Desktop/wavelix/Code/wavelix_admin/src/reducers/CreateAdminAccountReducer.js":"28","/home/user/Desktop/wavelix/Code/wavelix_admin/src/actions/CustomerAccountsActions.js":"29","/home/user/Desktop/wavelix/Code/wavelix_admin/src/components/CustomerAccounts.js":"30","/home/user/Desktop/wavelix/Code/wavelix_admin/src/reducers/CustomerAccountsReducer.js":"31","/home/user/Desktop/wavelix/Code/wavelix_admin/src/reducers/ViewCustomerAccountReducer.js":"32","/home/user/Desktop/wavelix/Code/wavelix_admin/src/actions/ViewCustomerAccountActions.js":"33","/home/user/Desktop/wavelix/Code/wavelix_admin/src/components/ViewCustomerAccount.js":"34","/home/user/Desktop/wavelix/Code/wavelix_admin/src/components/StoreAccounts.js":"35","/home/user/Desktop/wavelix/Code/wavelix_admin/src/reducers/StoreAccountsReducer.js":"36","/home/user/Desktop/wavelix/Code/wavelix_admin/src/actions/StoreAccountsActions.js":"37","/home/user/Desktop/wavelix/Code/wavelix_admin/src/components/ViewStoreAccount.js":"38","/home/user/Desktop/wavelix/Code/wavelix_admin/src/reducers/ViewStoreAccountReducer.js":"39","/home/user/Desktop/wavelix/Code/wavelix_admin/src/actions/ViewStoreAccountActions.js":"40","/home/user/Desktop/wavelix/Code/wavelix_admin/src/actions/DriverAccountsActions.js":"41","/home/user/Desktop/wavelix/Code/wavelix_admin/src/reducers/DriverAccountsReducer.js":"42","/home/user/Desktop/wavelix/Code/wavelix_admin/src/components/DriverAccounts.js":"43"},{"size":753,"mtime":1607501857378,"results":"44","hashOfConfig":"45"},{"size":362,"mtime":1606644508129,"results":"46","hashOfConfig":"45"},{"size":15340,"mtime":1607159123504,"results":"47","hashOfConfig":"45"},{"size":1732,"mtime":1608368567734,"results":"48","hashOfConfig":"45"},{"size":1904,"mtime":1608368567758,"results":"49","hashOfConfig":"45"},{"size":500,"mtime":1606644508129,"results":"50","hashOfConfig":"45"},{"size":3871,"mtime":1608020614394,"results":"51","hashOfConfig":"45"},{"size":8695,"mtime":1608368837751,"results":"52","hashOfConfig":"45"},{"size":70,"mtime":1607166648646,"results":"53","hashOfConfig":"45"},{"size":437,"mtime":1608368567762,"results":"54","hashOfConfig":"45"},{"size":222,"mtime":1606730890543,"results":"55","hashOfConfig":"45"},{"size":5092,"mtime":1608020725570,"results":"56","hashOfConfig":"45"},{"size":11131,"mtime":1608020753092,"results":"57","hashOfConfig":"45"},{"size":3454,"mtime":1608368567746,"results":"58","hashOfConfig":"45"},{"size":2698,"mtime":1607502994328,"results":"59","hashOfConfig":"45"},{"size":1163,"mtime":1606831132574,"results":"60","hashOfConfig":"45"},{"size":2461,"mtime":1606915201344,"results":"61","hashOfConfig":"45"},{"size":4980,"mtime":1606915201332,"results":"62","hashOfConfig":"45"},{"size":10602,"mtime":1607695133496,"results":"63","hashOfConfig":"45"},{"size":3298,"mtime":1607446587096,"results":"64","hashOfConfig":"45"},{"size":1349,"mtime":1607446741221,"results":"65","hashOfConfig":"45"},{"size":447,"mtime":1607166648654,"results":"66","hashOfConfig":"45"},{"size":4602,"mtime":1607435642527,"results":"67","hashOfConfig":"45"},{"size":8295,"mtime":1607598611953,"results":"68","hashOfConfig":"45"},{"size":21530,"mtime":1607435847954,"results":"69","hashOfConfig":"45"},{"size":13030,"mtime":1607433979357,"results":"70","hashOfConfig":"45"},{"size":5710,"mtime":1607433824807,"results":"71","hashOfConfig":"45"},{"size":4031,"mtime":1607433281038,"results":"72","hashOfConfig":"45"},{"size":3053,"mtime":1607594099524,"results":"73","hashOfConfig":"45"},{"size":6883,"mtime":1607597081049,"results":"74","hashOfConfig":"45"},{"size":1347,"mtime":1607594099528,"results":"75","hashOfConfig":"45"},{"size":1645,"mtime":1607597686366,"results":"76","hashOfConfig":"45"},{"size":2775,"mtime":1607597686382,"results":"77","hashOfConfig":"45"},{"size":8785,"mtime":1607598425271,"results":"78","hashOfConfig":"45"},{"size":18704,"mtime":1608025326709,"results":"79","hashOfConfig":"45"},{"size":1836,"mtime":1608024029629,"results":"80","hashOfConfig":"45"},{"size":4126,"mtime":1608024628157,"results":"81","hashOfConfig":"45"},{"size":36731,"mtime":1608042856164,"results":"82","hashOfConfig":"45"},{"size":3376,"mtime":1608033964605,"results":"83","hashOfConfig":"45"},{"size":6832,"mtime":1608042856148,"results":"84","hashOfConfig":"45"},{"size":1869,"mtime":1608370342938,"results":"85","hashOfConfig":"45"},{"size":1183,"mtime":1608369367715,"results":"86","hashOfConfig":"45"},{"size":9707,"mtime":1608372568169,"results":"87","hashOfConfig":"45"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},"zgiw1n",{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"121"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"99"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"93"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"99"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"90"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"90"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"99"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"96"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"99"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"99"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"121"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"99"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"192","messages":"193","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/user/Desktop/wavelix/Code/wavelix_admin/src/App.js",[],["194","195"],"/home/user/Desktop/wavelix/Code/wavelix_admin/src/reportWebVitals.js",[],["196","197"],"/home/user/Desktop/wavelix/Code/wavelix_admin/src/components/Login.js",[],["198","199"],"/home/user/Desktop/wavelix/Code/wavelix_admin/src/Routes.js",[],["200","201"],"/home/user/Desktop/wavelix/Code/wavelix_admin/src/reducers/index.js",[],"/home/user/Desktop/wavelix/Code/wavelix_admin/src/index.js",[],"/home/user/Desktop/wavelix/Code/wavelix_admin/src/reducers/LoginReducer.js",[],"/home/user/Desktop/wavelix/Code/wavelix_admin/src/actions/types.js",[],"/home/user/Desktop/wavelix/Code/wavelix_admin/src/helpers/index.js",[],["202","203"],"/home/user/Desktop/wavelix/Code/wavelix_admin/src/actions/index.js",[],"/home/user/Desktop/wavelix/Code/wavelix_admin/src/helpers/actionsHelper.js",[],["204","205"],"/home/user/Desktop/wavelix/Code/wavelix_admin/src/actions/LoginActions.js",[],"/home/user/Desktop/wavelix/Code/wavelix_admin/src/components/Home.js",["206"],"import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport {\n    logoutAdmin,\n    initializeHomePage,\n    changeMyEmail,\n    openCredentialModal,\n    closeCredentialModal,\n    changeMyPassword,\n    clearHomeState\n} from \"../actions\";\nimport TopHeader from \"./TopHeader\";\nimport Wrapper from \"./Wrapper\";\nimport {  Spinner, Image, Card, Row, Col ,  Button, Form, Modal, Alert} from \"react-bootstrap\";\nimport _ from \"lodash\";\nimport { getAdminRoles } from \"../helpers\";\n\nclass Home extends Component{\n\n    constructor(props) {\n\n        super(props);\n\n        const history = props.history;\n\n        const credential_modal_mode = null; // { 0: email, 1: password }\n\n        const credential = \"\";\n\n        this.state = {\n            history,\n            credential_modal_mode,\n            credential\n        };\n\n    }\n\n    componentWillUnmount(){\n        this.props.clearHomeState();\n    }\n\n    componentDidMount(){\n\n        const {\n            logged_in,\n            initializeHomePage,\n            access_token,\n            client,\n            uid\n        } = this.props;\n\n        const { history } = this.state;\n\n\n        if(!logged_in){\n\n            history.push(\"/\");\n\n        }else{\n\n            initializeHomePage(access_token, client, uid, history);\n\n        }\n\n    }\n\n\n\n\n\n    exitCredentialModal(){\n\n        const { closeCredentialModal } = this.props;\n\n        closeCredentialModal();\n\n        this.setState({credential_modal_mode: null, credential: ''});\n\n    }\n\n\n    credentialError(){\n\n        const { credential_error } = this.props;\n\n        if(credential_error.length > 0){\n\n            return(\n\n                <Alert variant=\"danger\">\n                    {credential_error}\n                </Alert>\n\n            );\n\n        }\n\n    }\n\n\n    changingCredentialSpinner(){\n\n        const { changing_credential } = this.props;\n\n        if(changing_credential){\n\n            return(\n\n                <div className=\"spinner-container\">\n\n                    <Spinner animation=\"border\" variant=\"primary\" />\n\n                </div>\n\n\n            );\n\n        }\n\n\n    }\n\n\n    credentialModal(){\n\n        const {\n            credential_modal_visible,\n            access_token,\n            client,\n            uid,\n            changeMyEmail,\n            changeMyPassword\n        } = this.props;\n\n\n        const { history, credential_modal_mode, credential } = this.state;\n\n        if(credential_modal_visible && credential_modal_mode !== null){\n\n            return(\n\n                <Modal\n                    show={credential_modal_visible}\n                    onHide={() => {\n                        this.exitCredentialModal();\n                    }}\n                    size=\"lg\"\n                    aria-labelledby=\"contained-modal-title-vcenter\"\n                    centered\n                >\n\n                    <Modal.Header closeButton>\n\n                        <Modal.Title>Change {credential_modal_mode === 0 ? 'Email' : 'Password'}</Modal.Title>\n\n                    </Modal.Header>\n\n                    <Modal.Body>\n\n\n                        <Form.Group controlId=\"formPlaintextCredential\">\n\n                            <Form.Label>\n                                {credential_modal_mode === 0 ? 'Email' : 'Password ( at least 8 characters long )'}\n                            </Form.Label>\n\n                            <Form.Control\n                                type={credential_modal_mode === 0 ? 'email' : 'password'}\n                                placeholder={credential_modal_mode === 0 ? 'email' : 'password'}\n                                onChange={(e) => {\n                                    this.setState({credential: e.target.value});\n                                }}\n                            />\n\n                        </Form.Group>\n\n                        {this.changingCredentialSpinner()}\n\n                        {this.credentialError()}\n\n\n\n                    </Modal.Body>\n\n                    <Modal.Footer>\n\n\n                        <Button\n                            variant=\"secondary\"\n                            onClick={(e) => {\n                                e.preventDefault();\n                                this.exitCredentialModal();\n                            }}\n                        >\n                            Close\n                        </Button>\n\n\n                        <Button\n                            variant=\"primary\"\n                            onClick={(e) => {\n\n                                e.preventDefault();\n\n                                if(credential_modal_mode === 0){\n\n                                    changeMyEmail(credential, access_token, client, uid, history);\n\n                                }else{\n\n                                    changeMyPassword(credential, access_token, client, uid, history);\n\n                                }\n\n                            }}\n                        >\n                            Submit\n                        </Button>\n\n                    </Modal.Footer>\n\n\n                </Modal>\n\n\n            );\n\n        }\n\n\n    }\n\n\n    show() {\n\n        const {\n            initializing_page,\n            profile_photo,\n            name,\n            email\n        } = this.props;\n\n        if (initializing_page) {\n\n            return(\n\n                <div className=\"center-container\">\n\n                    <div className=\"spinner-container\">\n\n                        <Spinner animation=\"border\" variant=\"primary\" />\n\n                    </div>\n\n                </div>\n\n\n\n            );\n\n        }else{\n\n            return(\n\n                <div className=\"page-container\">\n\n\n                    <div className=\"header-container\">\n\n\n                        <Image className=\"profile-photo\" src={profile_photo} thumbnail />\n\n\n                    </div>\n\n\n                    <div className=\"account-container\">\n\n\n                        <Card className=\"text-center account-card-container\">\n\n                            <Card.Header className=\"account-tile\">\n                                Account Information\n                            </Card.Header>\n\n\n\n                            <Card.Body>\n\n\n                                <Form>\n\n\n                                    <Form.Group as={Row} controlId=\"formPlaintextName\">\n\n                                        <Form.Label column sm=\"2\">\n                                            Name\n                                        </Form.Label>\n\n                                        <Col sm=\"10\">\n                                            <Form.Control\n                                                readOnly\n                                                type=\"text\"\n                                                value={name}\n                                            />\n                                        </Col>\n\n                                    </Form.Group>\n\n\n                                    <Form.Group as={Row} controlId=\"formPlaintextEmail\">\n\n                                        <Form.Label column sm=\"2\">\n                                            Email\n                                        </Form.Label>\n\n                                        <Col sm=\"10\">\n\n                                            <Form.Control\n                                                readOnly\n                                                type=\"text\"\n                                                value={email}\n                                            />\n\n                                        </Col>\n\n                                    </Form.Group>\n\n\n                                    <Form.Group as={Row} controlId=\"formPlaintextRoles\">\n\n                                        <Form.Label column sm=\"2\">\n                                            Roles\n                                        </Form.Label>\n\n                                        <Col sm=\"10\">\n\n                                            <Form.Control\n                                                readOnly\n                                                type=\"text\"\n                                                value={getAdminRoles(this.props.roles)}\n                                            />\n\n                                        </Col>\n\n                                    </Form.Group>\n\n\n                                </Form>\n\n\n\n\n                            </Card.Body>\n\n\n\n\n                            <Card.Footer className=\"footer-buttons-container\" >\n\n                                <Button\n                                    variant=\"outline-primary\"\n                                    className=\"footer-button\"\n                                    onClick={(e) => {\n\n                                        e.preventDefault();\n\n                                        this.props.openCredentialModal();\n\n                                        this.setState({credential_modal_mode: 0});\n\n\n                                    }}\n                                >\n                                    Change email\n                                </Button>\n\n\n                                <Button\n                                    variant=\"outline-primary\"\n                                    className=\"footer-button\"\n                                    onClick={(e) => {\n\n                                        e.preventDefault();\n\n                                        this.props.openCredentialModal();\n\n                                        this.setState({credential_modal_mode: 1});\n\n                                    }}\n                                >\n                                    Change password\n                                </Button>\n\n\n\n                            </Card.Footer>\n\n\n\n                        </Card>\n\n\n\n                    </div>\n\n\n\n                    {this.credentialModal()}\n\n\n                </div>\n\n            );\n        }\n\n    }\n\n\n\n\n    render(){\n\n        return(\n\n            <Wrapper\n                history={this.state.history}\n            >\n\n                <div>\n\n                    <TopHeader\n                        history={this.state.history}\n                    />\n\n\n                    {this.show()}\n\n\n                </div>\n\n            </Wrapper>\n\n        );\n\n    }\n\n\n}\n\n\nconst mapStateToProps = (state) => {\n\n    const {\n        access_token,\n        client,\n        uid,\n        logged_in,\n        roles\n    } = state.login;\n\n    const {\n        initializing_page,\n        profile_photo,\n        name,\n        email,\n        changing_credential,\n        credential_error,\n        credential_modal_visible\n    } = state.home;\n\n\n    return {\n        access_token,\n        client,\n        uid,\n        logged_in,\n        roles,\n        initializing_page,\n        profile_photo,\n        name,\n        email,\n        changing_credential,\n        credential_error,\n        credential_modal_visible\n    };\n\n\n};\n\n\nexport default connect(mapStateToProps, {\n    logoutAdmin,\n    initializeHomePage,\n    changeMyEmail,\n    openCredentialModal,\n    closeCredentialModal,\n    changeMyPassword,\n    clearHomeState\n})(Home)",["207","208"],"/home/user/Desktop/wavelix/Code/wavelix_admin/src/components/TopHeader.js",[],"/home/user/Desktop/wavelix/Code/wavelix_admin/src/components/Wrapper.js",[],"/home/user/Desktop/wavelix/Code/wavelix_admin/src/actions/WrapperActions.js",[],"/home/user/Desktop/wavelix/Code/wavelix_admin/src/reducers/HomeReducer.js",["209"],"import {\n    CHANGE_CREDENTIAL,\n    CHANGE_CREDENTIAL_ERROR,\n    CHANGE_MY_EMAIL_SUCCESS,\n    INITIALIZE_HOME_PAGE,\n    INITIALIZE_HOME_PAGE_COMPLETE,\n    LOGOUT_SUCCESS,\n    OPEN_CREDENTIAL_MODAL,\n    CLOSE_CREDENTIAL_MODAL,\n    CHANGE_MY_PASSWORD_SUCCESS,\n    CLEAR_HOME_STATE\n} from \"../actions/types\";\n\nconst INITIAL_STATE = {\n    initializing_page: false,\n    profile_photo: '',\n    name: '',\n    email: '',\n    changing_credential: false,\n    credential_error: '',\n    credential_modal_visible: false\n};\n\nexport default (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case CLOSE_CREDENTIAL_MODAL:\n            return{\n                ...state,\n                changing_credential: false,\n                credential_error: '',\n                credential_modal_visible: false\n            };\n        case OPEN_CREDENTIAL_MODAL:\n            return{\n                ...state,\n                credential_modal_visible: true\n            };\n        case CHANGE_MY_PASSWORD_SUCCESS:\n            return{\n                ...state,\n                changing_credential: false,\n                credential_modal_visible: false\n            };\n        case CHANGE_MY_EMAIL_SUCCESS:\n            return{\n                ...state,\n                changing_credential: false,\n                credential_modal_visible: false,\n                email: action.payload.email\n            };\n        case CHANGE_CREDENTIAL_ERROR:\n            return{\n                ...state,\n                changing_credential: false,\n                credential_error: action.payload\n            };\n        case CHANGE_CREDENTIAL:\n            return{\n                ...state,\n                changing_credential: true,\n                credential_error: ''\n            };\n        case INITIALIZE_HOME_PAGE_COMPLETE:\n            return{\n                ...state,\n                initializing_page: false,\n                profile_photo: action.payload.profile_photo,\n                name: action.payload.name,\n                email: action.payload.email\n            };\n        case INITIALIZE_HOME_PAGE:\n            return{\n                ...state,\n                initializing_page: true\n            };\n        case CLEAR_HOME_STATE:\n            return{\n                ...state,\n                ...INITIAL_STATE\n            };\n        case LOGOUT_SUCCESS:\n            return {\n                ...INITIAL_STATE\n            };\n        default:\n            return state;\n    }\n}","/home/user/Desktop/wavelix/Code/wavelix_admin/src/actions/HomeActions.js",[],"/home/user/Desktop/wavelix/Code/wavelix_admin/src/components/AdminAccounts.js",[],"/home/user/Desktop/wavelix/Code/wavelix_admin/src/actions/AdminAccountsActions.js",[],"/home/user/Desktop/wavelix/Code/wavelix_admin/src/reducers/AdminAccountsReducer.js",["210"],"import {\n    LOGOUT_SUCCESS,\n    GET_ADMIN_ACCOUNTS,\n    GET_ADMIN_ACCOUNTS_COMPLETE,\n    CLEAR_ADMIN_ACCOUNTS_STATE,\n    SEARCH_ADMINS_COMPLETE,\n    SEARCH_ADMINS_LIMIT_CHANGED\n} from \"../actions/types\";\n\nconst INITIAL_STATE = {\n    initializing_page: false,\n    admins: [],\n    available_roles: [],\n    limit: 30\n};\n\nexport default (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case SEARCH_ADMINS_LIMIT_CHANGED:\n            return{\n                ...state,\n                limit: action.payload\n            };\n        case SEARCH_ADMINS_COMPLETE:\n            return{\n                ...state,\n                admins: action.payload\n            };\n        case GET_ADMIN_ACCOUNTS_COMPLETE:\n            return{\n                ...state,\n                initializing_page: false,\n                admins: action.payload.admins,\n                available_roles: action.payload.available_roles\n            };\n        case GET_ADMIN_ACCOUNTS:\n            return{\n                ...state,\n                initializing_page: true\n            };\n        case CLEAR_ADMIN_ACCOUNTS_STATE:\n            return{\n                ...state,\n                ...INITIAL_STATE\n            };\n        case LOGOUT_SUCCESS:\n            return {\n                ...INITIAL_STATE\n            };\n        default:\n            return state;\n    }\n}","/home/user/Desktop/wavelix/Code/wavelix_admin/src/helpers/adminProfileHelper.js",[],["211","212"],"/home/user/Desktop/wavelix/Code/wavelix_admin/src/reducers/ViewAdminAccountReducer.js",["213"],"import {\n    LOGOUT_SUCCESS,\n    VIEW_ADMIN_ACCOUNT,\n    VIEW_ADMIN_ACCOUNT_SUCCESS,\n    VIEW_ADMIN_ACCOUNT_FAILURE,\n    CLEAR_VIEW_ADMIN_ACCOUNT_STATE,\n    OPEN_CHANGE_PASSWORD_MODAL,\n    CLOSE_CHANGE_PASSWORD_MODAL,\n    CHANGE_ADMIN_ACCOUNT_PASSWORD,\n    CHANGE_ADMIN_ACCOUNT_PASSWORD_FAILURE,\n    CHANGE_ADMIN_ACCOUNT_PASSWORD_SUCCESS,\n    OPEN_CHANGE_ROLES_MODAL,\n    CLOSE_CHANGE_ROLES_MODAL,\n    CHANGE_ADMIN_ACCOUNT_ROLES,\n    CHANGE_ADMIN_ACCOUNT_ROLES_FAILURE,\n    CHANGE_ADMIN_ACCOUNT_ROLES_SUCCESS\n} from \"../actions/types\";\n\n\nconst INITIAL_STATE = {\n    initializing_page: false,\n    admin_profile_photo: '',\n    admin_full_name: '',\n    admin_email: '',\n    admin_roles: [],\n    available_roles: [],\n    current_sign_in_ip: null,\n    last_sign_in_ip: null,\n    change_password_modal_visible: false,\n    change_roles_modal_visible: false,\n    editing_account: false,\n    edit_account_success_message: '',\n    edit_account_error_message: ''\n};\n\nexport default (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case CHANGE_ADMIN_ACCOUNT_ROLES_SUCCESS:\n            return{\n                ...state,\n                editing_account: false,\n                admin_roles: action.payload.admin_roles,\n                edit_account_success_message: action.payload.edit_account_success_message\n            };\n        case CHANGE_ADMIN_ACCOUNT_ROLES_FAILURE:\n            return{\n                ...state,\n                editing_account: false,\n                edit_account_error_message: action.payload\n            };\n        case CHANGE_ADMIN_ACCOUNT_ROLES:\n            return{\n                ...state,\n                editing_account: true,\n                edit_account_success_message: '',\n                edit_account_error_message: ''\n            };\n        case CLOSE_CHANGE_ROLES_MODAL:\n            return{\n                ...state,\n                change_roles_modal_visible: false,\n                editing_account: false,\n                edit_account_success_message: '',\n                edit_account_error_message: ''\n            };\n        case OPEN_CHANGE_ROLES_MODAL:\n            return{\n                ...state,\n                change_roles_modal_visible: true\n            };\n        case CHANGE_ADMIN_ACCOUNT_PASSWORD_SUCCESS:\n            return{\n                ...state,\n                editing_account: false,\n                edit_account_success_message: action.payload\n            };\n        case CHANGE_ADMIN_ACCOUNT_PASSWORD_FAILURE:\n            return{\n                ...state,\n                editing_account: false,\n                edit_account_error_message: action.payload\n            };\n        case CHANGE_ADMIN_ACCOUNT_PASSWORD:\n            return{\n                ...state,\n                editing_account: true,\n                edit_account_success_message: '',\n                edit_account_error_message: ''\n            };\n        case CLOSE_CHANGE_PASSWORD_MODAL:\n            return{\n                ...state,\n                change_password_modal_visible: false,\n                editing_account: false,\n                edit_account_success_message: '',\n                edit_account_error_message: ''\n            };\n        case OPEN_CHANGE_PASSWORD_MODAL:\n            return{\n                ...state,\n                change_password_modal_visible: true\n            };\n        case VIEW_ADMIN_ACCOUNT_SUCCESS:\n            return{\n                ...state,\n                initializing_page: false,\n                admin_profile_photo: action.payload.admin_profile_photo,\n                admin_full_name: action.payload.admin_full_name,\n                admin_email: action.payload.admin_email,\n                admin_roles: action.payload.admin_roles,\n                available_roles: action.payload.available_roles,\n                current_sign_in_ip: action.payload.current_sign_in_ip === undefined ? null :  action.payload.current_sign_in_ip,\n                last_sign_in_ip: action.payload.last_sign_in_ip === undefined ? null : action.payload.last_sign_in_ip\n            };\n        case VIEW_ADMIN_ACCOUNT_FAILURE:\n            return{\n                ...state,\n                initializing_page: false\n            };\n        case VIEW_ADMIN_ACCOUNT:\n            return{\n                ...state,\n                initializing_page: true\n            };\n        case CLEAR_VIEW_ADMIN_ACCOUNT_STATE:\n            return{\n                ...state,\n                ...INITIAL_STATE\n            };\n        case LOGOUT_SUCCESS:\n            return {\n                ...INITIAL_STATE\n            };\n        default:\n            return state;\n    }\n}","/home/user/Desktop/wavelix/Code/wavelix_admin/src/actions/ViewAdminAccountActions.js",[],"/home/user/Desktop/wavelix/Code/wavelix_admin/src/components/ViewAdminAccount.js",[],"/home/user/Desktop/wavelix/Code/wavelix_admin/src/components/CreateAdminAccount.js",[],"/home/user/Desktop/wavelix/Code/wavelix_admin/src/actions/CreateAdminAccountActions.js",[],"/home/user/Desktop/wavelix/Code/wavelix_admin/src/reducers/CreateAdminAccountReducer.js",["214"],"import {\n    INITIALIZE_NEW_ADMIN_ACCOUNT,\n    INITIALIZE_NEW_ADMIN_ACCOUNT_COMPLETE,\n    LOGOUT_SUCCESS,\n    CLEAR_CREATE_ADMIN_ACCOUNT_STATE,\n    CREATE_ADMIN_ACCOUNT,\n    CREATE_ADMIN_ACCOUNT_SUCCESS,\n    CREATE_ADMIN_EMAIL_ERROR,\n    CREATE_ADMIN_PASSWORD_ERROR,\n    CREATE_ADMIN_FULL_NAME_ERROR,\n    CREATE_ADMIN_PHOTO_ERROR,\n    CREATE_ADMIN_ROLES_ERROR,\n    CREATE_ADMIN_ERROR,\n    CREATE_ADMIN_ACCOUNT_FAILURE,\n    CLOSE_CREATE_ADMIN_SUCCESS_MODAL,\n    CLEAR_CREATE_ADMIN_ACCOUNT_ERRORS\n} from \"../actions/types\";\n\nconst INITIAL_STATE = {\n    initializing_page: false,\n    available_roles: [],\n    email_invalid: false,\n    email_error: '',\n    password_invalid: false,\n    password_error: '',\n    full_name_invalid: false,\n    full_name_error: '',\n    profile_photo_error: '',\n    roles_error: '',\n    create_error: '',\n    creating_account: false,\n    create_success_modal_visible: false\n};\n\n\nexport default (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case CLEAR_CREATE_ADMIN_ACCOUNT_ERRORS:\n            return{\n                ...state,\n                email_invalid: false,\n                email_error: '',\n                password_invalid: false,\n                password_error: '',\n                full_name_invalid: false,\n                full_name_error: '',\n                profile_photo_error: '',\n                roles_error: '',\n                create_error: ''\n            };\n        case CLOSE_CREATE_ADMIN_SUCCESS_MODAL:\n            return{\n                ...state,\n                create_success_modal_visible: false\n            };\n        case CREATE_ADMIN_ACCOUNT_SUCCESS:\n            return{\n                ...state,\n                email_invalid: false,\n                email_error: '',\n                password_invalid: false,\n                password_error: '',\n                full_name_invalid: false,\n                full_name_error: '',\n                profile_photo_error: '',\n                roles_error: '',\n                create_error: '',\n                creating_account: false,\n                create_success_modal_visible: true\n            };\n        case CREATE_ADMIN_ACCOUNT_FAILURE:\n            return{\n                ...state,\n                creating_account: false\n            };\n        case CREATE_ADMIN_ERROR:\n            return{\n                ...state,\n                create_error: action.payload\n            };\n        case CREATE_ADMIN_ROLES_ERROR:\n            return{\n                ...state,\n                roles_error: action.payload\n            };\n        case CREATE_ADMIN_PHOTO_ERROR:\n            return{\n                ...state,\n                profile_photo_error: action.payload\n            };\n        case CREATE_ADMIN_FULL_NAME_ERROR:\n            return{\n                ...state,\n                full_name_invalid: true,\n                full_name_error: action.payload\n            };\n        case CREATE_ADMIN_PASSWORD_ERROR:\n            return{\n                ...state,\n                password_invalid: true,\n                password_error: action.payload\n            };\n        case CREATE_ADMIN_EMAIL_ERROR:\n            return{\n                ...state,\n                email_invalid: true,\n                email_error: action.payload\n            };\n        case CREATE_ADMIN_ACCOUNT:\n            return{\n                ...state,\n\n                creating_account: true\n            };\n        case INITIALIZE_NEW_ADMIN_ACCOUNT_COMPLETE:\n            return{\n                ...state,\n                initializing_page: false,\n                available_roles: action.payload\n            };\n        case INITIALIZE_NEW_ADMIN_ACCOUNT:\n            return{\n                ...state,\n                initializing_page: true\n            };\n        case CLEAR_CREATE_ADMIN_ACCOUNT_STATE:\n            return{\n                ...state,\n                ...INITIAL_STATE\n            };\n        case LOGOUT_SUCCESS:\n            return {\n                ...INITIAL_STATE\n            };\n        default:\n            return state;\n    }\n}","/home/user/Desktop/wavelix/Code/wavelix_admin/src/actions/CustomerAccountsActions.js",["215"],"import {\n    LOGOUT_SUCCESS,\n    OPEN_TIMEOUT_MODAL,\n    GET_CUSTOMER_ACCOUNTS,\n    GET_CUSTOMER_ACCOUNTS_COMPLETE,\n    GET_CUSTOMER_ACCOUNTS_ROUTE,\n    CLEAR_CUSTOMER_ACCOUNTS_STATE,\n    SEARCH_CUSTOMER_ACCOUNTS_COMPLETE,\n    SEARCH_CUSTOMER_ACCOUNTS_ROUTE,\n    SEARCH_CUSTOMER_ACCOUNTS_LIMIT_CHANGED\n} from \"./types\";\n\nimport axios from \"axios\";\nimport { getFormData } from \"../helpers\";\nimport _ from \"lodash\";\n\nexport const searchCustomerAccountsLimitChanged = (limit) => {\n\n    return{\n      type: SEARCH_CUSTOMER_ACCOUNTS_LIMIT_CHANGED,\n      payload: limit\n    };\n\n};\n\nexport const searchCustomers = ( limit, search, access_token, client, uid, history ) => {\n\n    return(dispatch) => {\n\n        const config = {\n            headers: {\n                \"access-token\": access_token,\n                \"client\": client,\n                \"uid\": uid,\n                \"Accept\": \"application/json\"\n            }\n        };\n\n        let bodyFormData = getFormData({\n            limit: limit,\n            search: search\n        });\n\n\n        axios.post(SEARCH_CUSTOMER_ACCOUNTS_ROUTE, bodyFormData, config)\n            .then(response => {\n\n                const data = response.data;\n\n                const customer_accounts = data.customer_accounts;\n\n                dispatch({type: SEARCH_CUSTOMER_ACCOUNTS_COMPLETE, payload: customer_accounts});\n\n\n            }).catch(error => {\n\n            if(error.response !== undefined){\n\n                const status = error.response.status;\n\n                dispatch({type: LOGOUT_SUCCESS});\n\n                if(status === 440){\n\n                    dispatch({type: OPEN_TIMEOUT_MODAL});\n\n                }\n\n                history.push(\"/\");\n\n            }\n\n        });\n\n\n\n\n    };\n\n\n\n};\n\nexport const clearCustomerAccountsState = () => {\n\n    return{\n      type: CLEAR_CUSTOMER_ACCOUNTS_STATE\n    };\n\n};\n\nexport const getCustomerAccounts = (limit, access_token, client, uid, history) => {\n\n    return(dispatch) => {\n\n        const config = {\n            headers: {\n                \"access-token\": access_token,\n                \"client\": client,\n                \"uid\": uid,\n                \"Accept\": \"application/json\"\n            }\n        };\n\n        let bodyFormData = getFormData({\n            limit: limit\n        });\n\n        dispatch({type: GET_CUSTOMER_ACCOUNTS});\n\n        axios.post(GET_CUSTOMER_ACCOUNTS_ROUTE, bodyFormData, config)\n            .then(response => {\n\n                const data = response.data;\n\n                const customer_accounts = data.customer_accounts;\n\n                // console.log(customer_accounts);\n\n                dispatch({type: GET_CUSTOMER_ACCOUNTS_COMPLETE, payload: customer_accounts});\n\n\n            }).catch(error => {\n\n            if(error.response !== undefined){\n\n                const status = error.response.status;\n\n                dispatch({type: LOGOUT_SUCCESS});\n\n                if(status === 440){\n\n                    dispatch({type: OPEN_TIMEOUT_MODAL});\n\n                }\n\n                history.push(\"/\");\n\n            }\n\n        });\n\n    };\n\n};\n\n","/home/user/Desktop/wavelix/Code/wavelix_admin/src/components/CustomerAccounts.js",[],"/home/user/Desktop/wavelix/Code/wavelix_admin/src/reducers/CustomerAccountsReducer.js",["216"],"import {\n    LOGOUT_SUCCESS,\n    GET_CUSTOMER_ACCOUNTS,\n    GET_CUSTOMER_ACCOUNTS_COMPLETE,\n    CLEAR_CUSTOMER_ACCOUNTS_STATE,\n    SEARCH_CUSTOMER_ACCOUNTS_COMPLETE,\n    SEARCH_CUSTOMER_ACCOUNTS_LIMIT_CHANGED\n} from \"../actions/types\";\n\nconst INITIAL_STATE = {\n    initializing_page: false,\n    customer_accounts: [],\n    limit: 50\n};\n\nexport default (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case SEARCH_CUSTOMER_ACCOUNTS_LIMIT_CHANGED:\n            return{\n                ...state,\n                limit: action.payload\n            };\n        case SEARCH_CUSTOMER_ACCOUNTS_COMPLETE:\n            return{\n                ...state,\n                customer_accounts: action.payload\n            };\n        case GET_CUSTOMER_ACCOUNTS_COMPLETE:\n            return{\n                ...state,\n                initializing_page: false,\n                customer_accounts: action.payload\n            };\n        case GET_CUSTOMER_ACCOUNTS:\n            return{\n                ...state,\n                initializing_page: true\n            };\n        case CLEAR_CUSTOMER_ACCOUNTS_STATE:\n            return{\n                ...state,\n                ...INITIAL_STATE\n            };\n        case LOGOUT_SUCCESS:\n            return {\n                ...INITIAL_STATE\n            };\n        default:\n            return state;\n    }\n}","/home/user/Desktop/wavelix/Code/wavelix_admin/src/reducers/ViewCustomerAccountReducer.js",["217"],"import {\n    LOGOUT_SUCCESS,\n    GET_CUSTOMER_DATA_COMPLETE,\n    GET_CUSTOMER_DATA,\n    CLEAR_VIEW_CUSTOMER_ACCOUNT_STATE\n} from \"../actions/types\";\n\nconst INITIAL_STATE = {\n    initializing_page: false,\n    full_name: '',\n    email: '',\n    username: '',\n    building_name: '',\n    apartment_floor: '',\n    country: '',\n    phone_number: '',\n    current_sign_in_ip: '',\n    last_sign_in_ip: '',\n    profile_link: ''\n};\n\n\nexport default (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case GET_CUSTOMER_DATA_COMPLETE:\n            return{\n                ...state,\n                initializing_page: false,\n                full_name: action.payload.full_name,\n                email: action.payload.email,\n                username: action.payload.username,\n                building_name: action.payload.building_name,\n                apartment_floor: action.payload.apartment_floor,\n                country: action.payload.country,\n                phone_number: action.payload.phone_number,\n                current_sign_in_ip: action.payload.current_sign_in_ip,\n                last_sign_in_ip: action.payload.last_sign_in_ip,\n                profile_link: action.payload.profile_link\n            };\n        case GET_CUSTOMER_DATA:\n            return{\n                ...state,\n                initializing_page: true\n            };\n        case CLEAR_VIEW_CUSTOMER_ACCOUNT_STATE:\n            return{\n                ...state,\n                ...INITIAL_STATE\n            };\n        case LOGOUT_SUCCESS:\n            return {\n                ...INITIAL_STATE\n            };\n        default:\n            return state;\n    }\n}","/home/user/Desktop/wavelix/Code/wavelix_admin/src/actions/ViewCustomerAccountActions.js",[],"/home/user/Desktop/wavelix/Code/wavelix_admin/src/components/ViewCustomerAccount.js",["218","219"],"import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Wrapper from \"./Wrapper\";\nimport {\n    getCustomerData,\n    clearViewCustomerAccountState\n} from \"../actions\";\nimport _ from \"lodash\";\nimport {  Spinner, Card,  Button, Form, Modal} from \"react-bootstrap\";\n\nclass ViewCustomerAccount extends  Component{\n\n    constructor(props){\n\n        super(props);\n\n        const history = props.history;\n\n        const params = props.match.params;\n\n        this.state = {\n            history,\n            params\n        };\n\n    }\n\n    componentWillUnmount(){\n\n        this.props.clearViewCustomerAccountState();\n\n    }\n\n    componentDidMount(){\n\n\n        const {\n            logged_in,\n            access_token,\n            client,\n            uid,\n            getCustomerData\n        } = this.props;\n\n        const { history, params } = this.state;\n\n\n        if(!logged_in){\n\n            history.push(\"/\");\n\n        }else{\n\n            const customer_user_id = params.customer_user_id;\n\n            getCustomerData(customer_user_id, access_token, client, uid, history);\n\n\n        }\n\n    }\n\n\n    show(){\n\n        const {\n            initializing_page,\n            full_name,\n            email,\n            username,\n            building_name,\n            apartment_floor,\n            country,\n            phone_number,\n            current_sign_in_ip,\n            last_sign_in_ip,\n            profile_link\n        } = this.props;\n\n        if(initializing_page){\n\n            return(\n\n                <div className=\"center-container\">\n\n                    <div className=\"spinner-container\">\n\n                        <Spinner animation=\"border\" variant=\"primary\" />\n\n                    </div>\n\n                </div>\n\n\n            );\n\n        }else{\n\n            return(\n\n                <div className=\"page-container\">\n\n                    <div id=\"view-customer-account-container\">\n\n                        <div id=\"view-customer-profile-container\">\n\n                            <Button\n                                variant=\"primary\"\n                                onClick={(e) => {\n                                    e.preventDefault();\n                                    window.open(profile_link, \"_blank\")\n                                }}\n                            >\n                                View Profile\n                            </Button>\n\n                        </div>\n\n                        <Card id=\"view-customer-account-card\">\n\n\n\n                            <Card.Body>\n\n                                <Form>\n\n                                    <Form.Group  >\n\n                                        <Form.Label >\n                                            Full Name\n                                        </Form.Label>\n\n\n                                        <Form.Control\n                                            readOnly\n                                            type=\"text\"\n                                            value={full_name}\n                                        />\n\n                                    </Form.Group>\n\n\n\n                                    <Form.Group  >\n\n                                        <Form.Label >\n                                            Email\n                                        </Form.Label>\n\n\n                                        <Form.Control\n                                            readOnly\n                                            type=\"text\"\n                                            value={email}\n                                        />\n\n                                    </Form.Group>\n\n\n\n                                    <Form.Group  >\n\n                                        <Form.Label >\n                                            Username\n                                        </Form.Label>\n\n\n                                        <Form.Control\n                                            readOnly\n                                            type=\"text\"\n                                            value={username}\n                                        />\n\n                                    </Form.Group>\n\n\n                                    <Form.Group  >\n\n                                        <Form.Label >\n                                            Building Name\n                                        </Form.Label>\n\n\n                                        <Form.Control\n                                            readOnly\n                                            type=\"text\"\n                                            value={building_name}\n                                        />\n\n                                    </Form.Group>\n\n\n\n                                    <Form.Group  >\n\n                                        <Form.Label >\n                                            Apartment Floor\n                                        </Form.Label>\n\n\n                                        <Form.Control\n                                            readOnly\n                                            type=\"text\"\n                                            value={apartment_floor}\n                                        />\n\n                                    </Form.Group>\n\n\n\n                                    <Form.Group  >\n\n                                        <Form.Label >\n                                            Country\n                                        </Form.Label>\n\n\n                                        <Form.Control\n                                            readOnly\n                                            type=\"text\"\n                                            value={country}\n                                        />\n\n                                    </Form.Group>\n\n\n                                    <Form.Group  >\n\n                                        <Form.Label >\n                                            Phone Number\n                                        </Form.Label>\n\n\n                                        <Form.Control\n                                            readOnly\n                                            type=\"text\"\n                                            value={phone_number}\n                                        />\n\n                                    </Form.Group>\n\n\n\n                                    <Form.Group  >\n\n                                        <Form.Label >\n                                            Current Sign In Ip\n                                        </Form.Label>\n\n\n                                        <Form.Control\n                                            readOnly\n                                            type=\"text\"\n                                            value={current_sign_in_ip}\n                                        />\n\n                                    </Form.Group>\n\n\n                                    <Form.Group  >\n\n                                        <Form.Label >\n                                            Last Sign In Ip\n                                        </Form.Label>\n\n\n                                        <Form.Control\n                                            readOnly\n                                            type=\"text\"\n                                            value={last_sign_in_ip}\n                                        />\n\n                                    </Form.Group>\n\n\n\n\n                                </Form>\n\n                            </Card.Body>\n\n                        </Card>\n\n                    </div>\n\n                </div>\n\n            );\n\n        }\n\n    }\n\n    render(){\n\n        return(\n\n            <Wrapper\n                history={this.state.history}\n            >\n\n                <div>\n\n                    {this.show()}\n\n                </div>\n\n            </Wrapper>\n\n        );\n\n\n    }\n\n\n}\n\nconst mapStateToProps = (state) => {\n\n    const {\n        access_token,\n        client,\n        uid,\n        logged_in\n    } = state.login;\n\n    const {\n        initializing_page,\n        full_name,\n        email,\n        username,\n        building_name,\n        apartment_floor,\n        country,\n        phone_number,\n        current_sign_in_ip,\n        last_sign_in_ip,\n        profile_link\n    } = state.view_customer_account;\n\n    return {\n        access_token,\n        client,\n        uid,\n        logged_in,\n        initializing_page,\n        full_name,\n        email,\n        username,\n        building_name,\n        apartment_floor,\n        country,\n        phone_number,\n        current_sign_in_ip,\n        last_sign_in_ip,\n        profile_link\n    };\n};\n\nexport default connect(mapStateToProps, {\n    getCustomerData,\n    clearViewCustomerAccountState\n})(ViewCustomerAccount);\n","/home/user/Desktop/wavelix/Code/wavelix_admin/src/components/StoreAccounts.js",[],"/home/user/Desktop/wavelix/Code/wavelix_admin/src/reducers/StoreAccountsReducer.js",["220"],"import {\n    LOGOUT_SUCCESS,\n    INITIALIZE_STORE_ACCOUNTS_PAGE,\n    INITIALIZE_STORE_ACCOUNTS_PAGE_COMPLETE,\n    CLEAR_STORE_ACCOUNTS_STATE,\n    SEARCH_STORE_ACCOUNTS_COMPLETE,\n    SEARCH_STORE_ACCOUNTS_LIMIT_CHANGED,\n    STORE_ACCOUNTS_CHANGED\n} from \"../actions/types\";\n\nconst INITIAL_STATE = {\n    initializing_page: false,\n    limit: 50,\n    store_accounts: [],\n    account_status_options: [],\n    review_status_options: [],\n    countries: []\n};\n\nexport default (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case STORE_ACCOUNTS_CHANGED:\n            return{\n                ...state,\n                store_accounts: action.payload\n            };\n        case SEARCH_STORE_ACCOUNTS_LIMIT_CHANGED:\n            return{\n                ...state,\n                limit: action.payload\n            };\n        case SEARCH_STORE_ACCOUNTS_COMPLETE:\n            return{\n                ...state,\n                store_accounts: action.payload\n            };\n        case INITIALIZE_STORE_ACCOUNTS_PAGE_COMPLETE:\n            return{\n                ...state,\n                initializing_page: false,\n                store_accounts: action.payload.store_accounts,\n                account_status_options: action.payload.account_status_options,\n                review_status_options: action.payload.review_status_options,\n                countries: action.payload.countries\n            };\n        case INITIALIZE_STORE_ACCOUNTS_PAGE:\n            return{\n                ...state,\n                initializing_page: true\n            };\n        case CLEAR_STORE_ACCOUNTS_STATE:\n            return{\n                ...state,\n                ...INITIAL_STATE\n            };\n        case LOGOUT_SUCCESS:\n            return {\n                ...INITIAL_STATE\n            };\n        default:\n            return state;\n    }\n}\n","/home/user/Desktop/wavelix/Code/wavelix_admin/src/actions/StoreAccountsActions.js",[],"/home/user/Desktop/wavelix/Code/wavelix_admin/src/components/ViewStoreAccount.js",["221","222"],"import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Wrapper from \"./Wrapper\";\nimport {\n    getStoreData,\n    clearViewStoreAccountState,\n    storeAccountReviewersChanged,\n    storeAccountStatusChanged,\n    storeAccountReviewStatusChanged,\n    storeAccountVerifiedByChanged,\n    storeAccountAdminsDeclinedChanged,\n    storeAccountUnverifiedReasonsChanged,\n    acceptStoreVerification,\n    declineStoreVerification\n} from \"../actions\";\nimport _ from \"lodash\";\nimport {  Spinner, Card,  Button, Form, Modal, Alert, ListGroup} from \"react-bootstrap\";\nimport actionCable from \"actioncable\";\nimport { ACTION_CABLE_ROUTE } from \"../actions/types\";\n\nclass ViewStoreAccount extends Component{\n\n    constructor(props){\n\n        super(props);\n\n        const history = props.history;\n\n        const params = props.match.params;\n\n        const cable = actionCable.createConsumer(ACTION_CABLE_ROUTE);\n\n        const store_account_channel_subscription = null;\n\n        const business_license_modal_visible = false;\n\n        const accept_verification_modal_visible = false;\n\n        const decline_verification_modal_visible = false;\n\n        const declined_reason = \"\";\n\n        this.state = {\n            history,\n            params,\n            cable,\n            store_account_channel_subscription,\n            business_license_modal_visible,\n            accept_verification_modal_visible,\n            decline_verification_modal_visible,\n            declined_reason\n        };\n    }\n\n    componentWillUnmount(){\n\n        const cable = this.state.cable;\n\n        const store_account_channel_subscription = this.state.store_account_channel_subscription;\n\n        if(store_account_channel_subscription !== null){\n\n            cable.subscriptions.remove(store_account_channel_subscription);\n\n        }\n\n        this.props.clearViewStoreAccountState();\n\n    }\n\n    componentDidMount(){\n\n\n        const {\n            logged_in,\n            access_token,\n            client,\n            uid,\n            getStoreData,\n            storeAccountReviewersChanged,\n            storeAccountStatusChanged,\n            storeAccountReviewStatusChanged,\n            storeAccountVerifiedByChanged,\n            storeAccountAdminsDeclinedChanged,\n            storeAccountUnverifiedReasonsChanged\n        } = this.props;\n\n        const { history, params, cable } = this.state;\n\n\n        if(!logged_in){\n\n            history.push(\"/\");\n\n        }else{\n\n            const store_user_id = params.store_user_id;\n\n            getStoreData(store_user_id, access_token, client, uid, history);\n\n            const cable = this.state.cable;\n\n            let store_account_channel_subscription = this.state.store_account_channel_subscription;\n\n            if(store_account_channel_subscription === null){\n\n                store_account_channel_subscription = cable.subscriptions.create(\n                    {\n                        channel: 'StoreAccountChannel',\n                        access_token: access_token,\n                        client: client,\n                        uid: uid,\n                        store_user_id: store_user_id\n                    },\n                    {\n                        connected: () => {\n\n                            console.log('StoreAccountChannel Connected!');\n\n                        },\n                        received: (data) => {\n\n                            console.log(\"StoreAccountChannel Received!\");\n\n                            console.log(data);\n\n\n                            if(data.status !== undefined){\n\n                                const account_status = data.status;\n\n                                console.log(account_status);\n\n                                storeAccountStatusChanged(account_status);\n\n                            }\n\n\n                            if(data.review_status !== undefined){\n\n                                const review_status = data.review_status;\n\n                                console.log(review_status);\n\n                                storeAccountReviewStatusChanged(review_status);\n\n                            }\n\n                            if(data.verified_by !== undefined){\n\n                                const verified_by = data.verified_by;\n\n                                console.log(verified_by);\n\n                                storeAccountVerifiedByChanged(verified_by);\n\n\n                            }\n\n\n                            if(data.current_reviewers !== undefined){\n\n                                const current_reviewers = data.current_reviewers;\n\n                                console.log(current_reviewers);\n\n                                storeAccountReviewersChanged(current_reviewers);\n\n                            }\n\n\n                            if(data.admins_declined !== undefined){\n\n                                const admins_declined = data.admins_declined;\n\n                                console.log(admins_declined);\n\n                                storeAccountAdminsDeclinedChanged(admins_declined);\n\n                            }\n\n                            if(data.unverified_reasons !== undefined){\n\n                                const unverified_reasons = data.unverified_reasons;\n\n                                console.log(unverified_reasons);\n\n                                storeAccountUnverifiedReasonsChanged(unverified_reasons);\n\n                            }\n\n\n                        }\n                    }\n                );\n\n                this.setState({store_account_channel_subscription: store_account_channel_subscription});\n\n            }\n\n\n        }\n\n    }\n\n    verifiedBy(){\n\n        const {verified_by, status } = this.props;\n\n        if(!_.isEmpty(verified_by)){\n\n            return(\n\n                <Form.Group  >\n\n                    <Form.Label >\n                        Verified By\n                    </Form.Label>\n\n\n                    <Form.Control\n                        readOnly\n                        type=\"text\"\n                        value={verified_by}\n                    />\n\n                </Form.Group>\n\n            );\n\n        }\n\n    }\n\n    exitBusinessLicenseModal(){\n        this.setState({business_license_modal_visible: false});\n    }\n\n    businessLicenseModal(){\n\n        const { business_license_modal_visible } = this.state;\n\n        if(business_license_modal_visible){\n\n            return(\n\n                <Modal\n                    show={business_license_modal_visible}\n                    onHide={() => {\n                        this.exitBusinessLicenseModal();\n                    }}\n                    size=\"lg\"\n                    aria-labelledby=\"contained-modal-title-vcenter\"\n                    centered\n                >\n\n                    <Modal.Header closeButton>\n\n                        <Modal.Title>Business License Guidelines</Modal.Title>\n\n                    </Modal.Header>\n\n                    <Modal.Body>\n                        Please make sure NOT to open the document on your computer if possible,\n                        in case the document uploaded had a virus. It is recommended to view the document\n                        on https://onlinedocumentviewer.com/Viewer/ or Google Docs.\n                    </Modal.Body>\n\n                    <Modal.Footer>\n\n\n                        <Button variant=\"primary\" onClick={() => {\n                            this.exitBusinessLicenseModal();\n                        }}>\n                            Close\n                        </Button>\n\n                    </Modal.Footer>\n\n\n                </Modal>\n\n            );\n\n        }\n\n    }\n\n\n    currentReviewers(){\n\n\n        const { current_reviewers } = this.props;\n\n        if( current_reviewers.length > 0){\n\n            return(\n\n                <div >\n\n\n                    <Form.Label className=\"store-verification-label\">\n                        Currently Reviewing\n                    </Form.Label>\n\n\n\n                    <div >\n\n                        {\n                            _.map(current_reviewers, (reviewer, index) => {\n\n                                return(\n\n                                    <Button\n                                        key={index}\n                                        variant=\"outline-success\"\n                                        id=\"store-reviewer-button\"\n                                    >\n                                        {reviewer + \" •\" }\n                                    </Button>\n\n                                );\n\n                            })\n                        }\n\n                    </div>\n\n\n\n\n                </div>\n\n\n\n            );\n\n\n        }\n\n    }\n\n    unverifiedReasons(){\n\n        const { unverified_reasons } = this.props;\n\n        if(unverified_reasons.length > 0){\n\n            return(\n\n                <div>\n\n\n                    <Form.Label className=\"store-verification-label\">\n                        Reviewers Declined Reasons\n                    </Form.Label>\n\n\n                    {\n                        _.map(unverified_reasons, (unverified_reason, index) => {\n\n                            return(\n\n                                <Card\n                                    key={index}\n                                    className=\"store-unverified-reason-card\"\n                                >\n\n                                    <Card.Header>{_.startCase(unverified_reason.admin_name)}</Card.Header>\n\n                                    <Card.Body>\n\n                                        <Card.Text>\n                                            {unverified_reason.reason}\n                                        </Card.Text>\n\n\n                                    </Card.Body>\n\n                                </Card>\n\n                            );\n\n                        })\n                    }\n\n\n                </div>\n\n            );\n\n\n        }\n\n    }\n\n    acceptVerificationButton(){\n\n        const { status } = this.props;\n\n        if(status !== \"verified\"){\n\n            return(\n\n                <Button\n                    variant=\"outline-success\"\n                    onClick={(e) => {\n                        e.preventDefault();\n                        this.setState({accept_verification_modal_visible: true});\n                    }}\n                    className=\"store-verification-button\"\n                >\n                    Accept Verification\n                </Button>\n\n            );\n\n        }\n\n    }\n\n\n    declineVerificationButton(){\n\n        const { status , admins_declined, id} = this.props;\n\n        if(status !== \"verified\" && !admins_declined.includes(id)){\n\n            return(\n\n                <Button\n                    variant=\"outline-danger\"\n                    onClick={(e) => {\n\n                        e.preventDefault();\n\n                        this.setState({decline_verification_modal_visible: true});\n\n                    }}\n                    className=\"store-verification-button\"\n                >\n                    Decline Verification\n                </Button>\n\n            );\n\n        }\n\n    }\n\n    storeVerificationCard(){\n\n        const { roles, store_owner, store_name, store_number} = this.props;\n\n        if(roles.includes(\"root_admin\") || roles.includes(\"account_manager\")){\n\n            return(\n\n                <Card className=\"view-store-account-card\">\n\n                    <Card.Header\n                        as=\"h5\"\n                        className=\"view-store-account-card-header\"\n                    >\n                        Store Verification Guidelines\n                    </Card.Header>\n\n                    <Card.Body id=\"store-verification-card-body\">\n\n\n                        <Form>\n\n                            {this.currentReviewers()}\n\n\n                            <div>\n\n                                <Form.Label className=\"store-verification-label\">\n                                    Guidelines\n                                </Form.Label>\n\n                                <Alert\n                                    variant=\"warning\"\n                                    className=\"store-verification-instructions\"\n                                >\n                                    Please do all of the following tasks to verify and validate all of the store's information.\n                                    If the store is legit, legal and all information is correct, click on the accept verification\n                                    button. Else, click on the decline verification button and enter the reason for declining verification.\n                                    Please don't forget to check the time in the store's country before calling to avoid disturbing the\n                                    person you are calling.\n                                </Alert>\n\n\n                                <Alert variant=\"primary\" className=\"store-verification-process\">\n                                    Document Validation and Internet Search\n                                </Alert>\n\n                                <ListGroup className=\"store-verification-guidelines-container\">\n\n                                    <ListGroup.Item\n                                        className=\"store-verification-guidelines\"\n                                    >\n                                        Make sure the business license is certified and signed by a sworn translator,\n                                        a notary public or other relevant government authority.\n                                    </ListGroup.Item>\n\n                                    <ListGroup.Item\n                                        className=\"store-verification-guidelines\"\n                                    >\n                                        Check if the store owner name is included in the business license.\n                                    </ListGroup.Item>\n\n                                    <ListGroup.Item\n                                        className=\"store-verification-guidelines\"\n                                    >\n                                        Lookup information about the store on Google and view its location\n                                        on Google Maps by clicking the view store location button above. Make sure the store\n                                        exists and that its present on Google Maps. If it exists on Google Maps, check\n                                        if the store number matches that on Google (could be wrong on Google or different\n                                        number could be provided).\n                                    </ListGroup.Item>\n\n                                </ListGroup>\n\n\n                                <Alert variant=\"primary\" className=\"store-verification-process\">\n                                    Calling the Store\n                                </Alert>\n\n\n                                <ListGroup className=\"store-verification-guidelines-container\">\n\n                                    <ListGroup.Item\n                                        className=\"store-verification-guidelines\"\n                                    >\n                                        Call the store and ask them if the store owner ({store_owner}) is present and if he or she\n                                        is the store owner.\n                                    </ListGroup.Item>\n\n\n                                    <ListGroup.Item\n                                        className=\"store-verification-guidelines\"\n                                    >\n                                       When talking to the store owner say and ask them the following:<br/>\n                                        1) Hello this is [YOUR NAME] from Wavelix an online marketplace and e-commerce company.<br/>\n                                        2) Did you sign up your store on our platform?<br/>\n                                        3) Thank the store owner and tell them once their store is verified they will receive an email.<br/>\n                                    </ListGroup.Item>\n\n\n                                    <ListGroup.Item\n                                        className=\"store-verification-guidelines\"\n                                    >\n\n                                    </ListGroup.Item>\n\n                                </ListGroup>\n\n\n                                <Alert variant=\"primary\" className=\"store-verification-process\">\n                                    Contacting the government authority\n                                </Alert>\n\n\n                                <ListGroup className=\"store-verification-guidelines-container\">\n\n                                    <ListGroup.Item\n                                        className=\"store-verification-guidelines\"\n                                    >\n                                        Lookup the official contact information of the relevant government authority,\n                                        or call the number of the authority provided on the business license if available\n                                        (make sure it is legit). Call them if possible or email them, if emailing them\n                                        you may also attach the business license as well.\n                                    </ListGroup.Item>\n\n\n                                    <ListGroup.Item\n                                        className=\"store-verification-guidelines\"\n                                    >\n                                        When contacting them tell them and ask them about the following:<br/>\n                                        1) Hello this is [YOUR NAME] from Wavelix an online marketplace and e-commerce company.\n                                        We are currently verifying businesses signing up for our platform and would like to ask\n                                        a couple of questions to verify a store that just signed up.<br/>\n                                        2) Is there a store or company called {store_name} in your jurisdiction and is it\n                                        legally authorized to conduct business?<br/>\n                                        3) Do you have information about what the store sells?<br/>\n                                        4) Is the owner of the store called {store_owner}?<br/>\n                                        5) Do you know what the number of {store_name} is? (check if it matches the store\n                                        number ({store_number}) ignoring international dialing code.)<br/>\n                                        6) Thank the person on the phone.<br/>\n                                    </ListGroup.Item>\n\n\n\n\n\n                                </ListGroup>\n\n                                {this.acceptVerificationButton()}\n\n                                {this.declineVerificationButton()}\n\n\n                                {this.unverifiedReasons()}\n\n\n\n\n                            </div>\n\n\n                        </Form>\n\n\n\n                    </Card.Body>\n\n\n\n                </Card>\n\n            );\n\n\n        }\n\n\n\n    }\n\n\n    exitDeclineVerificationModal(){\n        this.setState({decline_verification_modal_visible: false, declined_reason: ''});\n    }\n\n    declineVerificationModalButton(){\n\n        const { declined_reason, params, history } = this.state;\n\n        const store_user_id = params.store_user_id;\n\n        if(_.isEmpty(declined_reason)){\n\n            return(\n\n                <Button\n                    disabled\n                    variant=\"danger\"\n                >\n                    Decline\n                </Button>\n\n            );\n\n        }else{\n\n            return(\n\n                <Button\n                    variant=\"danger\"\n                    onClick={(e) => {\n\n                        e.preventDefault();\n\n                        const {\n                            access_token,\n                            client,\n                            uid,\n                            declineStoreVerification\n                        } = this.props;\n\n                        declineStoreVerification(\n                            store_user_id,\n                            declined_reason,\n                            access_token,\n                            client,\n                            uid,\n                            history\n                        );\n\n                        this.exitDeclineVerificationModal();\n\n                    }}\n                >\n                    Decline\n                </Button>\n\n            );\n\n        }\n\n\n    }\n\n    declineVerificationModal(){\n\n        const { decline_verification_modal_visible} = this.state;\n\n\n        if(decline_verification_modal_visible){\n\n            return(\n\n                <Modal\n                    show={decline_verification_modal_visible}\n                    onHide={() => {\n                        this.exitDeclineVerificationModal();\n                    }}\n                    size=\"lg\"\n                    aria-labelledby=\"contained-modal-title-vcenter\"\n                    centered\n                >\n\n                    <Modal.Header closeButton>\n\n                        <Modal.Title>Decline Verification</Modal.Title>\n\n                    </Modal.Header>\n\n                    <Modal.Body>\n\n                        <Form.Group controlId=\"formPlaintextCredential\">\n\n                            <Form.Label>\n                                Please enter the reason(s) for declining verification\n                            </Form.Label>\n\n                            <Form.Control\n                                as=\"textarea\"\n                                rows={3}\n                                onChange={(e) => {\n                                    this.setState({declined_reason: e.target.value});\n                                }}\n                            />\n\n                        </Form.Group>\n\n                    </Modal.Body>\n\n                    <Modal.Footer>\n\n\n                        <Button\n                            variant=\"secondary\"\n                            onClick={(e) => {\n\n                                e.preventDefault();\n\n                                this.exitDeclineVerificationModal();\n\n                            }}\n                        >\n                            Close\n                        </Button>\n\n\n                        {this.declineVerificationModalButton()}\n\n                    </Modal.Footer>\n\n\n                </Modal>\n\n\n            );\n\n        }\n\n\n    }\n\n\n    exitAcceptVerificationModal(){\n        this.setState({accept_verification_modal_visible: false});\n    }\n\n    acceptVerificationModal(){\n\n        const { accept_verification_modal_visible, history, params } = this.state;\n\n        const store_user_id = params.store_user_id;\n\n        if(accept_verification_modal_visible){\n\n            return(\n\n                <Modal\n                    show={accept_verification_modal_visible}\n                    onHide={() => {\n                        this.exitAcceptVerificationModal();\n                    }}\n                    size=\"lg\"\n                    aria-labelledby=\"contained-modal-title-vcenter\"\n                    centered\n                >\n\n                    <Modal.Header closeButton>\n\n                        <Modal.Title>Accept Verification</Modal.Title>\n\n                    </Modal.Header>\n\n                    <Modal.Body>\n\n                        <p>\n                            By accepting the verification request, you confirm that you have gone\n                            through all necessary store verification guidelines and have made\n                            sure that the store business license is valid, that the store owner\n                            has indeed created an account for their store, and that the store is\n                            legally authorized to conduct business  in its jurisdiction.\n                        </p>\n\n                    </Modal.Body>\n\n                    <Modal.Footer>\n\n\n                        <Button\n                            variant=\"secondary\"\n                            onClick={(e) => {\n\n                                e.preventDefault();\n\n                                this.exitAcceptVerificationModal();\n\n                            }}\n                        >\n                            Close\n                        </Button>\n\n\n                        <Button\n                            variant=\"success\"\n                            onClick={(e) => {\n\n                                e.preventDefault();\n\n                                const {\n                                    acceptStoreVerification,\n                                    access_token,\n                                    client,\n                                    uid\n                                } = this.props;\n\n                                acceptStoreVerification(store_user_id, access_token, client, uid, history);\n\n                                this.exitAcceptVerificationModal();\n\n                            }}\n                        >\n                            Accept\n                        </Button>\n\n                    </Modal.Footer>\n\n\n                </Modal>\n\n            );\n\n        }\n\n    }\n\n    show(){\n\n        const {\n            initializing_page,\n            store_owner,\n            store_username,\n            store_name,\n            status,\n            review_status,\n            country,\n            has_sensitive_products,\n            business_license,\n            registered_at,\n            location,\n            store_owner_number,\n            store_number,\n            store_email\n        } = this.props;\n\n        if(initializing_page){\n\n            return(\n\n                <div className=\"center-container\">\n\n                    <div className=\"spinner-container\">\n\n                        <Spinner animation=\"border\" variant=\"primary\" />\n\n                    </div>\n\n                </div>\n\n\n            );\n\n        }else{\n\n            return(\n\n                <div className=\"page-container\">\n\n                    <div id=\"view-store-account-container\">\n\n                        <Card className=\"view-store-account-card\">\n\n                            <Card.Header\n                                as=\"h5\"\n                                className=\"view-store-account-card-header\"\n                            >\n                                {store_name}\n                            </Card.Header>\n\n                            <Card.Body>\n\n                                <Form>\n\n                                    <Form.Group  >\n\n                                        <Form.Label >\n                                            Store Owner\n                                        </Form.Label>\n\n\n                                        <Form.Control\n                                            readOnly\n                                            type=\"text\"\n                                            value={store_owner}\n                                        />\n\n                                    </Form.Group>\n\n\n                                    <Form.Group  >\n\n                                        <Form.Label >\n                                            Store Email\n                                        </Form.Label>\n\n\n                                        <Form.Control\n                                            readOnly\n                                            type=\"text\"\n                                            value={store_email}\n                                        />\n\n                                    </Form.Group>\n\n                                    <Form.Group  >\n\n                                        <Form.Label >\n                                            Store Username\n                                        </Form.Label>\n\n\n                                        <Form.Control\n                                            readOnly\n                                            type=\"text\"\n                                            value={store_username}\n                                        />\n\n                                    </Form.Group>\n\n\n                                    <Form.Group  >\n\n                                        <Form.Label >\n                                            Store Name\n                                        </Form.Label>\n\n\n                                        <Form.Control\n                                            readOnly\n                                            type=\"text\"\n                                            value={store_name}\n                                        />\n\n                                    </Form.Group>\n\n\n\n                                    <Form.Group  >\n\n                                        <Form.Label >\n                                            Store Number\n                                        </Form.Label>\n\n\n                                        <Form.Control\n                                            readOnly\n                                            type=\"text\"\n                                            value={store_number}\n                                        />\n\n                                    </Form.Group>\n\n                                    <Form.Group  >\n\n                                        <Form.Label >\n                                            Store Owner Number\n                                        </Form.Label>\n\n\n                                        <Form.Control\n                                            readOnly\n                                            type=\"text\"\n                                            value={store_owner_number}\n                                        />\n\n                                    </Form.Group>\n\n\n                                    <Form.Group  >\n\n                                        <Form.Label >\n                                            Account Status\n                                        </Form.Label>\n\n\n                                        <Form.Control\n                                            readOnly\n                                            type=\"text\"\n                                            value={_.startCase(status)}\n                                        />\n\n                                    </Form.Group>\n\n\n\n                                    <Form.Group  >\n\n                                        <Form.Label >\n                                            Review Status\n                                        </Form.Label>\n\n\n                                        <Form.Control\n                                            readOnly\n                                            type=\"text\"\n                                            value={_.startCase(review_status)}\n                                        />\n\n                                    </Form.Group>\n\n                                    {this.verifiedBy()}\n\n\n                                    <Form.Group  >\n\n                                        <Form.Label >\n                                            Store Country\n                                        </Form.Label>\n\n\n                                        <Form.Control\n                                            readOnly\n                                            type=\"text\"\n                                            value={country}\n                                        />\n\n                                    </Form.Group>\n\n\n                                    <Form.Group  >\n\n                                        <Form.Label >\n                                            Store is a restaurant, cafe, etc.\n                                        </Form.Label>\n\n\n                                        <Form.Control\n                                            readOnly\n                                            type=\"text\"\n                                            value={has_sensitive_products ? 'Yes' : 'No'}\n                                        />\n\n                                    </Form.Group>\n\n\n                                    <Form.Group  >\n\n                                        <Form.Label >\n                                            Registered At\n                                        </Form.Label>\n\n\n                                        <Form.Control\n                                            readOnly\n                                            type=\"text\"\n                                            value={registered_at}\n                                        />\n\n                                    </Form.Group>\n\n                                   <div id=\"view-store-data-container\">\n\n\n                                       <Button\n                                           className=\"view-store-data-button\"\n                                           variant=\"outline-primary\"\n                                           onClick={(e) => {\n\n                                               e.preventDefault();\n\n                                               this.setState({business_license_modal_visible: true});\n\n                                               window.open(business_license, \"_blank\")\n                                           }}\n                                       >\n                                           Download Business License\n                                       </Button>\n\n                                       <Button\n                                           className=\"view-store-data-button\"\n                                           variant=\"outline-primary\"\n                                           onClick={(e) => {\n\n                                               e.preventDefault();\n\n                                               const latitude = location.latitude;\n\n                                               const longitude = location.longitude;\n\n                                               const url = `https://www.google.com/maps/search/?api=1&query=${latitude},${longitude}`;\n\n                                               window.open(url, \"_blank\")\n\n                                           }}\n                                       >\n                                           View Store Location\n                                       </Button>\n\n                                   </div>\n\n\n                                </Form>\n\n                            </Card.Body>\n\n                        </Card>\n\n\n                        {this.storeVerificationCard()}\n\n                    </div>\n\n\n                    {this.businessLicenseModal()}\n\n                    {this.acceptVerificationModal()}\n\n                    {this.declineVerificationModal()}\n\n                </div>\n\n            );\n\n        }\n\n    }\n\n\n    render(){\n\n        return(\n\n            <Wrapper\n                history={this.state.history}\n            >\n\n                <div>\n\n                    {this.show()}\n\n                </div>\n\n            </Wrapper>\n\n        );\n\n\n    }\n\n}\n\nconst mapStateToProps = (state) => {\n\n    const {\n        access_token,\n        client,\n        uid,\n        logged_in,\n        roles,\n        id\n    } = state.login;\n\n    const {\n        initializing_page,\n        store_owner,\n        store_username,\n        store_name,\n        status,\n        review_status,\n        country,\n        has_sensitive_products,\n        business_license,\n        registered_at,\n        location,\n        store_owner_number,\n        store_number,\n        verified_by,\n        current_reviewers,\n        store_email,\n        admins_declined,\n        unverified_reasons\n    } = state.view_store_account;\n\n\n    return {\n        access_token,\n        client,\n        uid,\n        logged_in,\n        roles,\n        id,\n        initializing_page,\n        store_owner,\n        store_username,\n        store_name,\n        status,\n        review_status,\n        country,\n        has_sensitive_products,\n        business_license,\n        registered_at,\n        location,\n        store_owner_number,\n        store_number,\n        verified_by,\n        current_reviewers,\n        store_email,\n        admins_declined,\n        unverified_reasons\n    };\n\n\n};\n\nexport default connect(mapStateToProps, {\n    getStoreData,\n    clearViewStoreAccountState,\n    storeAccountReviewersChanged,\n    storeAccountStatusChanged,\n    storeAccountReviewStatusChanged,\n    storeAccountVerifiedByChanged,\n    storeAccountAdminsDeclinedChanged,\n    storeAccountUnverifiedReasonsChanged,\n    acceptStoreVerification,\n    declineStoreVerification\n})(ViewStoreAccount);\n","/home/user/Desktop/wavelix/Code/wavelix_admin/src/reducers/ViewStoreAccountReducer.js",["223"],"import {\n    LOGOUT_SUCCESS,\n    GET_STORE_DATA,\n    GET_STORE_DATA_COMPLETE,\n    CLEAR_VIEW_STORE_ACCOUNT_STATE,\n    STORE_ACCOUNT_REVIEWERS_CHANGED,\n    STORE_ACCOUNT_STATUS_CHANGED,\n    STORE_ACCOUNT_REVIEW_STATUS_CHANGED,\n    STORE_ACCOUNT_VERIFIED_BY_CHANGED,\n    STORE_ACCOUNT_ADMINS_DECLINED_CHANGED,\n    STORE_ACCOUNT_UNVERIFIED_REASONS_CHANGED\n} from \"../actions/types\";\n\nconst INITIAL_STATE = {\n    initializing_page: false,\n    store_owner: '',\n    store_username: '',\n    store_name: '',\n    status: '',\n    review_status: '',\n    country: '',\n    has_sensitive_products: null,\n    business_license: '',\n    registered_at: '',\n    location: {},\n    store_owner_number: '',\n    store_number: '',\n    verified_by: '',\n    current_reviewers: [],\n    store_email: '',\n    admins_declined: [],\n    unverified_reasons: []\n};\n\nexport default (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case STORE_ACCOUNT_UNVERIFIED_REASONS_CHANGED:\n            return{\n                ...state,\n                unverified_reasons: action.payload\n            };\n        case STORE_ACCOUNT_ADMINS_DECLINED_CHANGED:\n            return{\n                ...state,\n                admins_declined: action.payload\n            };\n        case STORE_ACCOUNT_VERIFIED_BY_CHANGED:\n            return{\n                ...state,\n                verified_by: action.payload\n            };\n        case STORE_ACCOUNT_REVIEW_STATUS_CHANGED:\n            return{\n                ...state,\n                review_status: action.payload\n            };\n        case STORE_ACCOUNT_STATUS_CHANGED:\n            return{\n                ...state,\n                status: action.payload\n            };\n        case STORE_ACCOUNT_REVIEWERS_CHANGED:\n            return{\n                ...state,\n                current_reviewers: action.payload\n            };\n        case GET_STORE_DATA_COMPLETE:\n            return{\n                ...state,\n                initializing_page: false,\n                store_owner: action.payload.store_owner,\n                store_username: action.payload.store_username,\n                store_name: action.payload.store_name,\n                status: action.payload.status,\n                review_status: action.payload.review_status,\n                country: action.payload.country,\n                has_sensitive_products: action.payload.has_sensitive_products,\n                business_license: action.payload.business_license,\n                registered_at: action.payload.registered_at,\n                location: action.payload.location,\n                store_owner_number: action.payload.store_owner_number,\n                store_number: action.payload.store_number,\n                verified_by: action.payload.verified_by,\n                store_email: action.payload.store_email,\n                admins_declined: action.payload.admins_declined,\n                unverified_reasons: action.payload.unverified_reasons\n            };\n        case GET_STORE_DATA:\n            return{\n                ...state,\n                initializing_page: true\n            };\n        case CLEAR_VIEW_STORE_ACCOUNT_STATE:\n            return{\n                ...state,\n                ...INITIAL_STATE\n            };\n        case LOGOUT_SUCCESS:\n            return {\n                ...INITIAL_STATE\n            };\n        default:\n            return state;\n    }\n}","/home/user/Desktop/wavelix/Code/wavelix_admin/src/actions/ViewStoreAccountActions.js",[],"/home/user/Desktop/wavelix/Code/wavelix_admin/src/actions/DriverAccountsActions.js",[],"/home/user/Desktop/wavelix/Code/wavelix_admin/src/reducers/DriverAccountsReducer.js",["224"],"/home/user/Desktop/wavelix/Code/wavelix_admin/src/components/DriverAccounts.js",["225","226"],{"ruleId":"227","replacedBy":"228"},{"ruleId":"229","replacedBy":"230"},{"ruleId":"227","replacedBy":"231"},{"ruleId":"229","replacedBy":"232"},{"ruleId":"227","replacedBy":"233"},{"ruleId":"229","replacedBy":"234"},{"ruleId":"227","replacedBy":"235"},{"ruleId":"229","replacedBy":"236"},{"ruleId":"227","replacedBy":"237"},{"ruleId":"229","replacedBy":"238"},{"ruleId":"227","replacedBy":"239"},{"ruleId":"229","replacedBy":"240"},{"ruleId":"241","severity":1,"message":"242","line":15,"column":8,"nodeType":"243","messageId":"244","endLine":15,"endColumn":9},{"ruleId":"227","replacedBy":"245"},{"ruleId":"229","replacedBy":"246"},{"ruleId":"247","severity":1,"message":"248","line":24,"column":1,"nodeType":"249","endLine":88,"endColumn":2},{"ruleId":"247","severity":1,"message":"248","line":17,"column":1,"nodeType":"249","endLine":53,"endColumn":2},{"ruleId":"227","replacedBy":"250"},{"ruleId":"229","replacedBy":"251"},{"ruleId":"247","severity":1,"message":"248","line":36,"column":1,"nodeType":"249","endLine":137,"endColumn":2},{"ruleId":"247","severity":1,"message":"248","line":36,"column":1,"nodeType":"249","endLine":138,"endColumn":2},{"ruleId":"241","severity":1,"message":"242","line":15,"column":8,"nodeType":"243","messageId":"244","endLine":15,"endColumn":9},{"ruleId":"247","severity":1,"message":"248","line":16,"column":1,"nodeType":"249","endLine":51,"endColumn":2},{"ruleId":"247","severity":1,"message":"248","line":23,"column":1,"nodeType":"249","endLine":57,"endColumn":2},{"ruleId":"241","severity":1,"message":"242","line":8,"column":8,"nodeType":"243","messageId":"244","endLine":8,"endColumn":9},{"ruleId":"241","severity":1,"message":"252","line":9,"column":41,"nodeType":"243","messageId":"244","endLine":9,"endColumn":46},{"ruleId":"247","severity":1,"message":"248","line":20,"column":1,"nodeType":"249","endLine":63,"endColumn":2},{"ruleId":"241","severity":1,"message":"253","line":88,"column":34,"nodeType":"243","messageId":"244","endLine":88,"endColumn":39},{"ruleId":"241","severity":1,"message":"254","line":208,"column":29,"nodeType":"243","messageId":"244","endLine":208,"endColumn":35},{"ruleId":"247","severity":1,"message":"248","line":35,"column":1,"nodeType":"249","endLine":105,"endColumn":2},{"ruleId":"247","severity":1,"message":"248","line":17,"column":1,"nodeType":"249","endLine":44,"endColumn":2},{"ruleId":"241","severity":1,"message":"255","line":9,"column":39,"nodeType":"243","messageId":"244","endLine":9,"endColumn":45},{"ruleId":"241","severity":1,"message":"256","line":9,"column":47,"nodeType":"243","messageId":"244","endLine":9,"endColumn":52},"no-native-reassign",["257"],"no-negated-in-lhs",["258"],["257"],["258"],["257"],["258"],["257"],["258"],["257"],["258"],["257"],["258"],"no-unused-vars","'_' is defined but never used.","Identifier","unusedVar",["257"],["258"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration",["257"],["258"],"'Modal' is defined but never used.","'cable' is assigned a value but never used.","'status' is assigned a value but never used.","'Button' is defined but never used.","'Table' is defined but never used.","no-global-assign","no-unsafe-negation"]