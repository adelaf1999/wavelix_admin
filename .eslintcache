[{"/home/user/Desktop/wavelix/Code/wavelix_admin/src/App.js":"1","/home/user/Desktop/wavelix/Code/wavelix_admin/src/reportWebVitals.js":"2","/home/user/Desktop/wavelix/Code/wavelix_admin/src/components/Login.js":"3","/home/user/Desktop/wavelix/Code/wavelix_admin/src/Routes.js":"4","/home/user/Desktop/wavelix/Code/wavelix_admin/src/reducers/index.js":"5","/home/user/Desktop/wavelix/Code/wavelix_admin/src/index.js":"6","/home/user/Desktop/wavelix/Code/wavelix_admin/src/reducers/LoginReducer.js":"7","/home/user/Desktop/wavelix/Code/wavelix_admin/src/actions/types.js":"8","/home/user/Desktop/wavelix/Code/wavelix_admin/src/helpers/index.js":"9","/home/user/Desktop/wavelix/Code/wavelix_admin/src/actions/index.js":"10","/home/user/Desktop/wavelix/Code/wavelix_admin/src/helpers/actionsHelper.js":"11","/home/user/Desktop/wavelix/Code/wavelix_admin/src/actions/LoginActions.js":"12","/home/user/Desktop/wavelix/Code/wavelix_admin/src/components/Home.js":"13","/home/user/Desktop/wavelix/Code/wavelix_admin/src/components/TopHeader.js":"14","/home/user/Desktop/wavelix/Code/wavelix_admin/src/components/Wrapper.js":"15","/home/user/Desktop/wavelix/Code/wavelix_admin/src/actions/WrapperActions.js":"16","/home/user/Desktop/wavelix/Code/wavelix_admin/src/reducers/HomeReducer.js":"17","/home/user/Desktop/wavelix/Code/wavelix_admin/src/actions/HomeActions.js":"18","/home/user/Desktop/wavelix/Code/wavelix_admin/src/components/AdminAccounts.js":"19","/home/user/Desktop/wavelix/Code/wavelix_admin/src/actions/AdminAccountsActions.js":"20","/home/user/Desktop/wavelix/Code/wavelix_admin/src/reducers/AdminAccountsReducer.js":"21","/home/user/Desktop/wavelix/Code/wavelix_admin/src/helpers/adminProfileHelper.js":"22","/home/user/Desktop/wavelix/Code/wavelix_admin/src/reducers/ViewAdminAccountReducer.js":"23","/home/user/Desktop/wavelix/Code/wavelix_admin/src/actions/ViewAdminAccountActions.js":"24","/home/user/Desktop/wavelix/Code/wavelix_admin/src/components/ViewAdminAccount.js":"25","/home/user/Desktop/wavelix/Code/wavelix_admin/src/components/CreateAdminAccount.js":"26","/home/user/Desktop/wavelix/Code/wavelix_admin/src/actions/CreateAdminAccountActions.js":"27","/home/user/Desktop/wavelix/Code/wavelix_admin/src/reducers/CreateAdminAccountReducer.js":"28"},{"size":753,"mtime":1606727198881,"results":"29","hashOfConfig":"30"},{"size":362,"mtime":1606644508129,"results":"31","hashOfConfig":"30"},{"size":15340,"mtime":1607159123504,"results":"32","hashOfConfig":"30"},{"size":929,"mtime":1607422031520,"results":"33","hashOfConfig":"30"},{"size":1181,"mtime":1607425299706,"results":"34","hashOfConfig":"30"},{"size":500,"mtime":1606644508129,"results":"35","hashOfConfig":"30"},{"size":3660,"mtime":1606912558541,"results":"36","hashOfConfig":"30"},{"size":5595,"mtime":1607433228685,"results":"37","hashOfConfig":"30"},{"size":70,"mtime":1607166648646,"results":"38","hashOfConfig":"30"},{"size":224,"mtime":1607424347079,"results":"39","hashOfConfig":"30"},{"size":222,"mtime":1606730890543,"results":"40","hashOfConfig":"30"},{"size":4896,"mtime":1606900441073,"results":"41","hashOfConfig":"30"},{"size":11131,"mtime":1607251581225,"results":"42","hashOfConfig":"30"},{"size":2574,"mtime":1607159861967,"results":"43","hashOfConfig":"30"},{"size":985,"mtime":1606829879810,"results":"44","hashOfConfig":"30"},{"size":1163,"mtime":1606831132574,"results":"45","hashOfConfig":"30"},{"size":2461,"mtime":1606915201344,"results":"46","hashOfConfig":"30"},{"size":4980,"mtime":1606915201332,"results":"47","hashOfConfig":"30"},{"size":9749,"mtime":1607422031516,"results":"48","hashOfConfig":"30"},{"size":3049,"mtime":1607176296094,"results":"49","hashOfConfig":"30"},{"size":1377,"mtime":1607175797747,"results":"50","hashOfConfig":"30"},{"size":447,"mtime":1607166648654,"results":"51","hashOfConfig":"30"},{"size":4602,"mtime":1607435642527,"results":"52","hashOfConfig":"30"},{"size":8340,"mtime":1607435404632,"results":"53","hashOfConfig":"30"},{"size":21530,"mtime":1607435847954,"results":"54","hashOfConfig":"30"},{"size":13030,"mtime":1607433979357,"results":"55","hashOfConfig":"30"},{"size":5710,"mtime":1607433824807,"results":"56","hashOfConfig":"30"},{"size":4031,"mtime":1607433281038,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"zgiw1n",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"69"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"66"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"106"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"66"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/user/Desktop/wavelix/Code/wavelix_admin/src/App.js",[],["125","126"],"/home/user/Desktop/wavelix/Code/wavelix_admin/src/reportWebVitals.js",[],["127","128"],"/home/user/Desktop/wavelix/Code/wavelix_admin/src/components/Login.js",[],["129","130"],"/home/user/Desktop/wavelix/Code/wavelix_admin/src/Routes.js",[],["131","132"],"/home/user/Desktop/wavelix/Code/wavelix_admin/src/reducers/index.js",[],"/home/user/Desktop/wavelix/Code/wavelix_admin/src/index.js",[],"/home/user/Desktop/wavelix/Code/wavelix_admin/src/reducers/LoginReducer.js",[],"/home/user/Desktop/wavelix/Code/wavelix_admin/src/actions/types.js",[],"/home/user/Desktop/wavelix/Code/wavelix_admin/src/helpers/index.js",[],"/home/user/Desktop/wavelix/Code/wavelix_admin/src/actions/index.js",[],"/home/user/Desktop/wavelix/Code/wavelix_admin/src/helpers/actionsHelper.js",[],"/home/user/Desktop/wavelix/Code/wavelix_admin/src/actions/LoginActions.js",[],["133","134"],"/home/user/Desktop/wavelix/Code/wavelix_admin/src/components/Home.js",["135"],"import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport {\n    logoutAdmin,\n    initializeHomePage,\n    changeMyEmail,\n    openCredentialModal,\n    closeCredentialModal,\n    changeMyPassword,\n    clearHomeState\n} from \"../actions\";\nimport TopHeader from \"./TopHeader\";\nimport Wrapper from \"./Wrapper\";\nimport {  Spinner, Image, Card, Row, Col ,  Button, Form, Modal, Alert} from \"react-bootstrap\";\nimport _ from \"lodash\";\nimport { getAdminRoles } from \"../helpers\";\n\nclass Home extends Component{\n\n    constructor(props) {\n\n        super(props);\n\n        const history = props.history;\n\n        const credential_modal_mode = null; // { 0: email, 1: password }\n\n        const credential = \"\";\n\n        this.state = {\n            history,\n            credential_modal_mode,\n            credential\n        };\n\n    }\n\n    componentWillUnmount(){\n        this.props.clearHomeState();\n    }\n\n    componentDidMount(){\n\n        const {\n            logged_in,\n            initializeHomePage,\n            access_token,\n            client,\n            uid\n        } = this.props;\n\n        const { history } = this.state;\n\n\n        if(!logged_in){\n\n            history.push(\"/\");\n\n        }else{\n\n            initializeHomePage(access_token, client, uid, history);\n\n        }\n\n    }\n\n\n\n\n\n    exitCredentialModal(){\n\n        const { closeCredentialModal } = this.props;\n\n        closeCredentialModal();\n\n        this.setState({credential_modal_mode: null, credential: ''});\n\n    }\n\n\n    credentialError(){\n\n        const { credential_error } = this.props;\n\n        if(credential_error.length > 0){\n\n            return(\n\n                <Alert variant=\"danger\">\n                    {credential_error}\n                </Alert>\n\n            );\n\n        }\n\n    }\n\n\n    changingCredentialSpinner(){\n\n        const { changing_credential } = this.props;\n\n        if(changing_credential){\n\n            return(\n\n                <div className=\"spinner-container\">\n\n                    <Spinner animation=\"border\" variant=\"primary\" />\n\n                </div>\n\n\n            );\n\n        }\n\n\n    }\n\n\n    credentialModal(){\n\n        const {\n            credential_modal_visible,\n            access_token,\n            client,\n            uid,\n            changeMyEmail,\n            changeMyPassword\n        } = this.props;\n\n\n        const { history, credential_modal_mode, credential } = this.state;\n\n        if(credential_modal_visible && credential_modal_mode !== null){\n\n            return(\n\n                <Modal\n                    show={credential_modal_visible}\n                    onHide={() => {\n                        this.exitCredentialModal();\n                    }}\n                    size=\"lg\"\n                    aria-labelledby=\"contained-modal-title-vcenter\"\n                    centered\n                >\n\n                    <Modal.Header closeButton>\n\n                        <Modal.Title>Change {credential_modal_mode === 0 ? 'Email' : 'Password'}</Modal.Title>\n\n                    </Modal.Header>\n\n                    <Modal.Body>\n\n\n                        <Form.Group controlId=\"formPlaintextCredential\">\n\n                            <Form.Label>\n                                {credential_modal_mode === 0 ? 'Email' : 'Password ( at least 8 characters long )'}\n                            </Form.Label>\n\n                            <Form.Control\n                                type={credential_modal_mode === 0 ? 'email' : 'password'}\n                                placeholder={credential_modal_mode === 0 ? 'email' : 'password'}\n                                onChange={(e) => {\n                                    this.setState({credential: e.target.value});\n                                }}\n                            />\n\n                        </Form.Group>\n\n                        {this.changingCredentialSpinner()}\n\n                        {this.credentialError()}\n\n\n\n                    </Modal.Body>\n\n                    <Modal.Footer>\n\n\n                        <Button\n                            variant=\"secondary\"\n                            onClick={(e) => {\n                                e.preventDefault();\n                                this.exitCredentialModal();\n                            }}\n                        >\n                            Close\n                        </Button>\n\n\n                        <Button\n                            variant=\"primary\"\n                            onClick={(e) => {\n\n                                e.preventDefault();\n\n                                if(credential_modal_mode === 0){\n\n                                    changeMyEmail(credential, access_token, client, uid, history);\n\n                                }else{\n\n                                    changeMyPassword(credential, access_token, client, uid, history);\n\n                                }\n\n                            }}\n                        >\n                            Submit\n                        </Button>\n\n                    </Modal.Footer>\n\n\n                </Modal>\n\n\n            );\n\n        }\n\n\n    }\n\n\n    show() {\n\n        const {\n            initializing_page,\n            profile_photo,\n            name,\n            email\n        } = this.props;\n\n        if (initializing_page) {\n\n            return(\n\n                <div className=\"center-container\">\n\n                    <div className=\"spinner-container\">\n\n                        <Spinner animation=\"border\" variant=\"primary\" />\n\n                    </div>\n\n                </div>\n\n\n\n            );\n\n        }else{\n\n            return(\n\n                <div className=\"page-container\">\n\n\n                    <div className=\"header-container\">\n\n\n                        <Image className=\"profile-photo\" src={profile_photo} thumbnail />\n\n\n                    </div>\n\n\n                    <div className=\"account-container\">\n\n\n                        <Card className=\"text-center account-card-container\">\n\n                            <Card.Header className=\"account-tile\">\n                                Account Information\n                            </Card.Header>\n\n\n\n                            <Card.Body>\n\n\n                                <Form>\n\n\n                                    <Form.Group as={Row} controlId=\"formPlaintextName\">\n\n                                        <Form.Label column sm=\"2\">\n                                            Name\n                                        </Form.Label>\n\n                                        <Col sm=\"10\">\n                                            <Form.Control\n                                                readOnly\n                                                type=\"text\"\n                                                value={name}\n                                            />\n                                        </Col>\n\n                                    </Form.Group>\n\n\n                                    <Form.Group as={Row} controlId=\"formPlaintextEmail\">\n\n                                        <Form.Label column sm=\"2\">\n                                            Email\n                                        </Form.Label>\n\n                                        <Col sm=\"10\">\n\n                                            <Form.Control\n                                                readOnly\n                                                type=\"text\"\n                                                value={email}\n                                            />\n\n                                        </Col>\n\n                                    </Form.Group>\n\n\n                                    <Form.Group as={Row} controlId=\"formPlaintextRoles\">\n\n                                        <Form.Label column sm=\"2\">\n                                            Roles\n                                        </Form.Label>\n\n                                        <Col sm=\"10\">\n\n                                            <Form.Control\n                                                readOnly\n                                                type=\"text\"\n                                                value={getAdminRoles(this.props.roles)}\n                                            />\n\n                                        </Col>\n\n                                    </Form.Group>\n\n\n                                </Form>\n\n\n\n\n                            </Card.Body>\n\n\n\n\n                            <Card.Footer className=\"footer-buttons-container\" >\n\n                                <Button\n                                    variant=\"outline-primary\"\n                                    className=\"footer-button\"\n                                    onClick={(e) => {\n\n                                        e.preventDefault();\n\n                                        this.props.openCredentialModal();\n\n                                        this.setState({credential_modal_mode: 0});\n\n\n                                    }}\n                                >\n                                    Change email\n                                </Button>\n\n\n                                <Button\n                                    variant=\"outline-primary\"\n                                    className=\"footer-button\"\n                                    onClick={(e) => {\n\n                                        e.preventDefault();\n\n                                        this.props.openCredentialModal();\n\n                                        this.setState({credential_modal_mode: 1});\n\n                                    }}\n                                >\n                                    Change password\n                                </Button>\n\n\n\n                            </Card.Footer>\n\n\n\n                        </Card>\n\n\n\n                    </div>\n\n\n\n                    {this.credentialModal()}\n\n\n                </div>\n\n            );\n        }\n\n    }\n\n\n\n\n    render(){\n\n        return(\n\n            <Wrapper\n                history={this.state.history}\n            >\n\n                <div>\n\n                    <TopHeader\n                        history={this.state.history}\n                    />\n\n\n                    {this.show()}\n\n\n                </div>\n\n            </Wrapper>\n\n        );\n\n    }\n\n\n}\n\n\nconst mapStateToProps = (state) => {\n\n    const {\n        access_token,\n        client,\n        uid,\n        logged_in,\n        roles\n    } = state.login;\n\n    const {\n        initializing_page,\n        profile_photo,\n        name,\n        email,\n        changing_credential,\n        credential_error,\n        credential_modal_visible\n    } = state.home;\n\n\n    return {\n        access_token,\n        client,\n        uid,\n        logged_in,\n        roles,\n        initializing_page,\n        profile_photo,\n        name,\n        email,\n        changing_credential,\n        credential_error,\n        credential_modal_visible\n    };\n\n\n};\n\n\nexport default connect(mapStateToProps, {\n    logoutAdmin,\n    initializeHomePage,\n    changeMyEmail,\n    openCredentialModal,\n    closeCredentialModal,\n    changeMyPassword,\n    clearHomeState\n})(Home)","/home/user/Desktop/wavelix/Code/wavelix_admin/src/components/TopHeader.js",[],"/home/user/Desktop/wavelix/Code/wavelix_admin/src/components/Wrapper.js",[],"/home/user/Desktop/wavelix/Code/wavelix_admin/src/actions/WrapperActions.js",[],"/home/user/Desktop/wavelix/Code/wavelix_admin/src/reducers/HomeReducer.js",["136"],"import {\n    CHANGE_CREDENTIAL,\n    CHANGE_CREDENTIAL_ERROR,\n    CHANGE_MY_EMAIL_SUCCESS,\n    INITIALIZE_HOME_PAGE,\n    INITIALIZE_HOME_PAGE_COMPLETE,\n    LOGOUT_SUCCESS,\n    OPEN_CREDENTIAL_MODAL,\n    CLOSE_CREDENTIAL_MODAL,\n    CHANGE_MY_PASSWORD_SUCCESS,\n    CLEAR_HOME_STATE\n} from \"../actions/types\";\n\nconst INITIAL_STATE = {\n    initializing_page: false,\n    profile_photo: '',\n    name: '',\n    email: '',\n    changing_credential: false,\n    credential_error: '',\n    credential_modal_visible: false\n};\n\nexport default (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case CLOSE_CREDENTIAL_MODAL:\n            return{\n                ...state,\n                changing_credential: false,\n                credential_error: '',\n                credential_modal_visible: false\n            };\n        case OPEN_CREDENTIAL_MODAL:\n            return{\n                ...state,\n                credential_modal_visible: true\n            };\n        case CHANGE_MY_PASSWORD_SUCCESS:\n            return{\n                ...state,\n                changing_credential: false,\n                credential_modal_visible: false\n            };\n        case CHANGE_MY_EMAIL_SUCCESS:\n            return{\n                ...state,\n                changing_credential: false,\n                credential_modal_visible: false,\n                email: action.payload.email\n            };\n        case CHANGE_CREDENTIAL_ERROR:\n            return{\n                ...state,\n                changing_credential: false,\n                credential_error: action.payload\n            };\n        case CHANGE_CREDENTIAL:\n            return{\n                ...state,\n                changing_credential: true,\n                credential_error: ''\n            };\n        case INITIALIZE_HOME_PAGE_COMPLETE:\n            return{\n                ...state,\n                initializing_page: false,\n                profile_photo: action.payload.profile_photo,\n                name: action.payload.name,\n                email: action.payload.email\n            };\n        case INITIALIZE_HOME_PAGE:\n            return{\n                ...state,\n                initializing_page: true\n            };\n        case CLEAR_HOME_STATE:\n            return{\n                ...state,\n                ...INITIAL_STATE\n            };\n        case LOGOUT_SUCCESS:\n            return {\n                ...INITIAL_STATE\n            };\n        default:\n            return state;\n    }\n}","/home/user/Desktop/wavelix/Code/wavelix_admin/src/actions/HomeActions.js",[],"/home/user/Desktop/wavelix/Code/wavelix_admin/src/components/AdminAccounts.js",[],"/home/user/Desktop/wavelix/Code/wavelix_admin/src/actions/AdminAccountsActions.js",["137"],"import {\n    LOGOUT_SUCCESS,\n    OPEN_TIMEOUT_MODAL,\n    GET_ADMIN_ACCOUNTS,\n    GET_ADMIN_ACCOUNTS_COMPLETE,\n    GET_ADMIN_ACCOUNTS_ROUTE,\n    CLEAR_ADMIN_ACCOUNTS_STATE,\n    SEARCH_ADMIN_ROUTE,\n    SEARCH_ADMINS,\n    SEARCH_ADMINS_COMPLETE\n} from \"./types\";\n\nimport axios from \"axios\";\nimport { getFormData } from \"../helpers\";\nimport _ from \"lodash\";\n\n\nexport const searchAdmins = (search, role, access_token, client, uid, history) => {\n\n    return(dispatch) => {\n\n        const config = {\n            headers: {\n                \"access-token\": access_token,\n                \"client\": client,\n                \"uid\": uid,\n                \"Accept\": \"application/json\"\n            }\n        };\n\n        let bodyFormData = new FormData();\n\n        let data = {\n            search: search\n        };\n\n        if(!_.isEmpty(role)){\n\n            data.role = role;\n\n        }\n\n        _.each(data, (value, key) => {\n\n            bodyFormData.append(key, value);\n\n        });\n\n\n        dispatch({type: SEARCH_ADMINS});\n\n        axios.post(SEARCH_ADMIN_ROUTE, bodyFormData, config)\n            .then(response => {\n\n                const data = response.data;\n\n                const admins = data.admins;\n\n                dispatch({type: SEARCH_ADMINS_COMPLETE, payload: admins});\n\n            }).catch(error => {\n\n            if(error.response !== undefined){\n\n                const status = error.response.status;\n\n                dispatch({type: LOGOUT_SUCCESS});\n\n                if(status === 440){\n\n                    dispatch({type: OPEN_TIMEOUT_MODAL});\n\n                }\n\n                history.push(\"/\");\n\n            }\n\n        });\n\n\n\n    };\n\n};\n\n\n\nexport const clearAdminAccountsState = () => {\n\n    return{\n        type: CLEAR_ADMIN_ACCOUNTS_STATE\n    };\n\n};\n\n\nexport const getAdminAccounts = (access_token, client, uid, history) => {\n\n    return(dispatch) => {\n\n        const config = {\n            headers: {\n                \"access-token\": access_token,\n                \"client\": client,\n                \"uid\": uid,\n                \"Accept\": \"application/json\"\n            }\n        };\n\n        dispatch({type: GET_ADMIN_ACCOUNTS});\n\n        axios.get(GET_ADMIN_ACCOUNTS_ROUTE, config)\n            .then(response => {\n\n                const data = response.data;\n\n                const admins = data.admins;\n\n                const available_roles = data.available_roles;\n\n                console.log(admins);\n                //\n                // console.log(available_roles);\n\n\n                dispatch({type: GET_ADMIN_ACCOUNTS_COMPLETE, payload: {\n                    admins: admins,\n                    available_roles: available_roles\n                }})\n\n\n\n            }).catch(error => {\n\n            if(error.response !== undefined){\n\n                const status = error.response.status;\n\n                dispatch({type: LOGOUT_SUCCESS});\n\n                if(status === 440){\n\n                    dispatch({type: OPEN_TIMEOUT_MODAL});\n\n                }\n\n                history.push(\"/\");\n\n            }\n\n        });\n\n    };\n\n};",["138","139"],"/home/user/Desktop/wavelix/Code/wavelix_admin/src/reducers/AdminAccountsReducer.js",["140"],"import {\n    LOGOUT_SUCCESS,\n    GET_ADMIN_ACCOUNTS,\n    GET_ADMIN_ACCOUNTS_COMPLETE,\n    CLEAR_ADMIN_ACCOUNTS_STATE,\n    SEARCH_ADMINS,\n    SEARCH_ADMINS_COMPLETE\n} from \"../actions/types\";\n\nconst INITIAL_STATE = {\n    initializing_page: false,\n    admins: [],\n    available_roles: [],\n    searching_admins: false\n};\n\nexport default (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case SEARCH_ADMINS_COMPLETE:\n            return{\n                ...state,\n                searching_admins: false,\n                admins: action.payload\n            };\n        case SEARCH_ADMINS:\n            return{\n                ...state,\n                searching_admins: true\n            };\n        case GET_ADMIN_ACCOUNTS_COMPLETE:\n            return{\n                ...state,\n                initializing_page: false,\n                admins: action.payload.admins,\n                available_roles: action.payload.available_roles\n            };\n        case GET_ADMIN_ACCOUNTS:\n            return{\n                ...state,\n                initializing_page: true\n            };\n        case CLEAR_ADMIN_ACCOUNTS_STATE:\n            return{\n                ...state,\n                ...INITIAL_STATE\n            };\n        case LOGOUT_SUCCESS:\n            return {\n                ...INITIAL_STATE\n            };\n        default:\n            return state;\n    }\n}","/home/user/Desktop/wavelix/Code/wavelix_admin/src/helpers/adminProfileHelper.js",[],["141","142"],"/home/user/Desktop/wavelix/Code/wavelix_admin/src/reducers/ViewAdminAccountReducer.js",["143"],"/home/user/Desktop/wavelix/Code/wavelix_admin/src/actions/ViewAdminAccountActions.js",[],"/home/user/Desktop/wavelix/Code/wavelix_admin/src/components/ViewAdminAccount.js",[],"/home/user/Desktop/wavelix/Code/wavelix_admin/src/components/CreateAdminAccount.js",[],"/home/user/Desktop/wavelix/Code/wavelix_admin/src/actions/CreateAdminAccountActions.js",[],"/home/user/Desktop/wavelix/Code/wavelix_admin/src/reducers/CreateAdminAccountReducer.js",["144"],{"ruleId":"145","replacedBy":"146"},{"ruleId":"147","replacedBy":"148"},{"ruleId":"145","replacedBy":"149"},{"ruleId":"147","replacedBy":"150"},{"ruleId":"145","replacedBy":"151"},{"ruleId":"147","replacedBy":"152"},{"ruleId":"145","replacedBy":"153"},{"ruleId":"147","replacedBy":"154"},{"ruleId":"145","replacedBy":"155"},{"ruleId":"147","replacedBy":"156"},{"ruleId":"157","severity":1,"message":"158","line":15,"column":8,"nodeType":"159","messageId":"160","endLine":15,"endColumn":9},{"ruleId":"161","severity":1,"message":"162","line":24,"column":1,"nodeType":"163","endLine":88,"endColumn":2},{"ruleId":"157","severity":1,"message":"164","line":14,"column":10,"nodeType":"159","messageId":"160","endLine":14,"endColumn":21},{"ruleId":"145","replacedBy":"165"},{"ruleId":"147","replacedBy":"166"},{"ruleId":"161","severity":1,"message":"162","line":17,"column":1,"nodeType":"163","endLine":54,"endColumn":2},{"ruleId":"145","replacedBy":"167"},{"ruleId":"147","replacedBy":"168"},{"ruleId":"161","severity":1,"message":"162","line":36,"column":1,"nodeType":"163","endLine":137,"endColumn":2},{"ruleId":"161","severity":1,"message":"162","line":36,"column":1,"nodeType":"163","endLine":138,"endColumn":2},"no-native-reassign",["169"],"no-negated-in-lhs",["170"],["169"],["170"],["169"],["170"],["169"],["170"],["169"],["170"],"no-unused-vars","'_' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'getFormData' is defined but never used.",["169"],["170"],["169"],["170"],"no-global-assign","no-unsafe-negation"]